{"ast":null,"code":"import _slicedToArray from \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/components/Sidebar.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setShowTrams } from '../reducers/showTramsReducer';\nimport { setMyStop } from '../reducers/myStopReducer';\nimport { setCenter, setZoom, setShowAlert, setShowSidebar, closeSidebar, toggleAlertVariant, setAvgDuration, setLine } from '../reducers/settingsReducer';\nimport { setMyTram } from '../reducers/myTramReducer';\nimport { Container, Row, Col, Button, Dropdown, Alert } from 'react-bootstrap';\nimport distance, { sortByVehicleNumbers, sortLineNumbers, sortStopNames } from '../utils/helpers';\nimport Sound from 'react-sound';\n\nconst Sidebar = ({\n  closeSidebar,\n  trams,\n  showTrams,\n  setShowTrams,\n  setCenter,\n  setZoom,\n  stops,\n  myStop,\n  setMyStop,\n  myTram,\n  setMyTram,\n  setShowAlert,\n  settings,\n  toggleAlertVariant,\n  setAvgDuration\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        line = _useState2[0],\n        setLine = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        alarm = _useState4[0],\n        setAlarm = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        speeds = _useState6[0],\n        setSpeeds = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        durations = _useState8[0],\n        setDurations = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        isLogged = _useState10[0],\n        setIsLogged = _useState10[1];\n\n  const _useState11 = useState('menu'),\n        _useState12 = _slicedToArray(_useState11, 2),\n        show = _useState12[0],\n        setShow = _useState12[1];\n\n  const style = settings.showSidebar ? {\n    width: '250px'\n  } : {\n    width: '0'\n  };\n  useEffect(() => {\n    //console.log('SIDEBAR INIT', settings.init)\n    if (alarm) {\n      let chosenTram = trams.find(tram => tram.VP.veh === myTram.VP.veh);\n      let distanceNow = distance(myStop.lat, myStop.lon, chosenTram.VP.lat, chosenTram.VP.long);\n      /* let halfWay = {\n        lat: (myStop.lat + chosenTram.VP.lat) / 2,\n        lng: (myStop.lon + chosenTram.VP.long) / 2\n      }\n      setCenter(halfWay) */\n\n      setSpeeds(speeds.concat(chosenTram.VP.spd));\n\n      if (speeds.length > 1) {\n        let avgSpeed = speeds.reduce((previous, current) => current += previous) / speeds.length;\n        let duration = distanceNow / avgSpeed;\n        setDurations(durations.concat(duration));\n        console.log(durations);\n        let avgDuration = duration;\n        let sum = 0;\n        let counter = 0;\n\n        if (durations.length > 1) {\n          for (let i = durations.length - 1; i >= 0; i--) {\n            sum += durations[i];\n            counter++;\n\n            if (counter > 9) {\n              break;\n            }\n          }\n\n          avgDuration = sum / counter;\n        }\n\n        if (durations.length > 4 && chosenTram.VP.spd > 0) {\n          setAvgDuration(avgDuration);\n        }\n\n        console.log('DISTANCE NOW: ', distanceNow, ' m', 'AVG SPEED: ', (avgSpeed * 3.6).toFixed(2), ' km/h', chosenTram.VP.spd, ' m/s', 'ESTIMATED DURATION: ', Math.floor(avgDuration / 60), ' min', (avgDuration % 60).toFixed(0), ' sec');\n      }\n\n      if (distanceNow < 5) {\n        setAlarm(false);\n        setMyTram('');\n        setLine(0);\n        setSpeeds([]);\n        setDurations([]);\n        closeSidebar();\n        setShowAlert(true);\n      }\n\n      if (settings.showAlert) {\n        toggleAlertVariant();\n      }\n    }\n  }, [trams]);\n\n  const handleChooseMyTram = veh => {\n    console.log('TRAM CHOSEN: ', veh);\n\n    if (veh !== 'reset') {\n      let chosenTram = trams.find(tram => tram.VP.veh == veh);\n      console.log('chosen Tram:', chosenTram);\n      setMyTram(chosenTram); //setShowTrams([])\n\n      /* let halfWay = {\n        lat: (myStop.lat + chosenTram.VP.lat) / 2,\n        lng: (myStop.lon + chosenTram.VP.long) / 2,\n      }\n      setCenter(halfWay) */\n      //setCenter({ lat: chosenTram.VP.lat , lng: chosenTram.VP.long })\n      //setZoom(16)\n    } else {\n      setAlarm(false);\n      setMyTram('');\n      setLine(0);\n    }\n  };\n\n  const handleShowLine = line => {\n    console.log('LINE CHOSEN: ', line);\n    setShowTrams(trams.filter(tram => parseInt(tram.VP.desi) == line)); //setZoom(13)\n  };\n\n  const handleChooseStop = stopsGtfsId => {\n    console.log('STOP CHOSEN: ', stopsGtfsId);\n    setMyStop(stops.find(stop => stop.gtfsId === stopsGtfsId));\n  };\n\n  let tramsInOrder = [...trams];\n  tramsInOrder.sort(sortByVehicleNumbers);\n  const lineNumbers = [];\n  trams.forEach(tram => {\n    if (!lineNumbers.includes(parseInt(tram.VP.desi))) {\n      lineNumbers.push(parseInt(tram.VP.desi));\n    }\n  });\n  lineNumbers.sort(sortLineNumbers);\n  const stopsInOrder = [...stops];\n  stopsInOrder.sort(sortStopNames);\n  const buttonVariant = 'secondary';\n  return React.createElement(\"div\", {\n    style: style,\n    className: \"sidebar\",\n    id: \"mySidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, show === 'menu' && React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: buttonVariant,\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, !myStop ? 'Choose stop' : myStop.name + ' ' + myStop.gtfsId), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, stopsInOrder.map((stop, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleChooseStop(stop.gtfsId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, stop.name, \" \", stop.gtfsId)))))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: buttonVariant,\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, line > 0 ? 'Line: ' + line : 'Line?'), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, myTram.VP && React.createElement(Dropdown.Item, {\n    onClick: () => handleChooseMyTram('reset'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"reset\"), lineNumbers.map((line, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => setLine(line),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, line)))))), line > 0 && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: buttonVariant,\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, myTram.VP ? 'Vehicle: ' + myTram.VP.veh : 'Vehicle?'), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, myTram.VP && React.createElement(Dropdown.Item, {\n    onClick: () => handleChooseMyTram('reset'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, \"reset\"), tramsInOrder.filter(tram => tram.VP.desi == line || tram.VP.desi == line + 'T' || tram.VP.desi == line + 'H').map((tram, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleChooseMyTram(tram.VP.veh),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, tram.VP.veh)))))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, myTram.VP && myStop && React.createElement(Col, {\n    xs: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: buttonVariant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, \"Distance:\", ' ', distance(myStop.lat, myStop.lon, trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat, trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long), ' m', \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }), settings.avgDuration > 0 && 'Duration:' + Math.floor(settings.avgDuration / 60) + ' min' + (settings.avgDuration % 60).toFixed(0) + ' sec'))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, myTram.VP && React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: !alarm ? buttonVariant : 'warning',\n    onClick: () => setAlarm(!alarm),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, !alarm ? 'Set alarm' : 'Alarm off'))), trams.length !== showTrams.length && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => {\n      setShowTrams(trams); //setZoom(13)\n      //closeSidebar()\n    },\n    variant: buttonVariant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, \"Show all trams\"))), (myTram.VP || showTrams.length > 0) && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setShowTrams([]),\n    variant: buttonVariant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, \"Hide all trams\"))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: buttonVariant,\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  }, \"Show line\"), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }, lineNumbers.map((line, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleShowLine(line),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }, line)))))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: buttonVariant,\n    onClick: () => setIsLogged(!isLogged),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349\n    },\n    __self: this\n  }, isLogged ? 'LOGOUT' : 'LOGIN'))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: buttonVariant,\n    onClick: () => setShow('settings'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360\n    },\n    __self: this\n  }, \"Settings\")))), show === 'settings' && React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setShow('menu'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374\n    },\n    __self: this\n  }, \"GO BACK TO MENU\")))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    trams: state.trams,\n    showTrams: state.showTrams,\n    showSidebar: state.showSidebar,\n    stops: state.stops,\n    myStop: state.myStop,\n    myTram: state.myTram,\n    settings: state.settings\n  };\n};\n\nconst mapDispatchToProps = {\n  setShowTrams,\n  setMyStop,\n  setCenter,\n  setZoom,\n  setMyTram,\n  setShowAlert,\n  closeSidebar,\n  toggleAlertVariant,\n  setAvgDuration\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\n{\n  /* \n        <Form>\n          <Row>\n            <Col xs='auto'>\n              <Form.Group controlId='exampleForm.ControlSelect3'>\n                <Form.Label>My stop</Form.Label>\n                <Form.Control\n                  as='select'\n                  onChange={handleChooseStop}\n                  value={myStop.gtfsId}\n                >\n                  <option> - </option>\n                  {stopsInOrder.map((stop, i) => (\n                    <option key={i} value={stop.gtfsId}>\n                      {stop.name} {stop.gtfsId}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group controlId='exampleForm.ControlSelect1'>\n                <Form.Label>Choose tram</Form.Label>\n                <Form.Control as='select' onChange={handleChooseMyTram}>\n                  {!myTram.VP ? (\n                    <option> - </option>\n                  ) : (\n                    <option value='reset'>reset</option>\n                  )}\n                  {tramsInOrder.map((tram, i) => (\n                    <option key={i} value={tram.VP.veh}>\n                      line: {tram.VP.desi} veh:{tram.VP.veh}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n             <Row>\n            <Col sm={5}>\n              <Form.Group>\n                <Form.Check\n                  type='radio'\n                  label='All times'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios1'\n                />\n                <Form.Check\n                  type='radio'\n                  label='today'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios2'\n                />\n                <Form.Check\n                  type='radio'\n                  label='this week'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios3'\n                />\n              </Form.Group>\n            </Col>   \n          </Row> \n          <Row>\n          <Col>\n            <Form.Group controlId='exampleForm.ControlSelect2'>\n              <Form.Label>Show line</Form.Label>\n              <Form.Control as='select' onChange={handleShowLine}>\n                <option> - </option>\n                {lineNumbers.map((line, i) => (\n                  <option key={i} value={line}>\n                    {line}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Col>\n        </Row> \n        </Form> */\n}","map":{"version":3,"sources":["/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/components/Sidebar.js"],"names":["React","useState","useEffect","connect","setShowTrams","setMyStop","setCenter","setZoom","setShowAlert","setShowSidebar","closeSidebar","toggleAlertVariant","setAvgDuration","setLine","setMyTram","Container","Row","Col","Button","Dropdown","Alert","distance","sortByVehicleNumbers","sortLineNumbers","sortStopNames","Sound","Sidebar","trams","showTrams","stops","myStop","myTram","settings","line","alarm","setAlarm","speeds","setSpeeds","durations","setDurations","isLogged","setIsLogged","show","setShow","style","showSidebar","width","chosenTram","find","tram","VP","veh","distanceNow","lat","lon","long","concat","spd","length","avgSpeed","reduce","previous","current","duration","console","log","avgDuration","sum","counter","i","toFixed","Math","floor","showAlert","handleChooseMyTram","handleShowLine","filter","parseInt","desi","handleChooseStop","stopsGtfsId","stop","gtfsId","tramsInOrder","sort","lineNumbers","forEach","includes","push","stopsInOrder","buttonVariant","name","map","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { setShowTrams } from '../reducers/showTramsReducer'\nimport { setMyStop } from '../reducers/myStopReducer'\nimport { setCenter, setZoom, setShowAlert, setShowSidebar, closeSidebar,toggleAlertVariant,\n  setAvgDuration, setLine\n} from '../reducers/settingsReducer'\nimport { setMyTram } from '../reducers/myTramReducer'\nimport { Container, Row, Col, Button, Dropdown, Alert } from 'react-bootstrap'\nimport distance, {\n  sortByVehicleNumbers,\n  sortLineNumbers,\n  sortStopNames,\n} from '../utils/helpers'\nimport Sound from 'react-sound'\n\nconst Sidebar = ({\n  closeSidebar,\n  trams,\n  showTrams,\n  setShowTrams,\n  setCenter,\n  setZoom,\n  stops,\n  myStop,\n  setMyStop,\n  myTram,\n  setMyTram,\n  setShowAlert,\n  settings,\n  toggleAlertVariant,\n  setAvgDuration,\n}) => {\n  const [line, setLine] = useState('')\n  const [alarm, setAlarm] = useState(false)\n  const [speeds, setSpeeds] = useState([])\n  const [durations, setDurations] = useState([])\n  const [isLogged, setIsLogged] = useState(false)\n  const [show, setShow] = useState('menu')\n\n  const style = settings.showSidebar ? { width: '250px' } : { width: '0' }\n\n  useEffect(() => {\n    //console.log('SIDEBAR INIT', settings.init)\n    if (alarm) {\n      let chosenTram = trams.find(tram => tram.VP.veh === myTram.VP.veh)\n      let distanceNow = distance(\n        myStop.lat,\n        myStop.lon,\n        chosenTram.VP.lat,\n        chosenTram.VP.long\n      )\n      /* let halfWay = {\n        lat: (myStop.lat + chosenTram.VP.lat) / 2,\n        lng: (myStop.lon + chosenTram.VP.long) / 2\n      }\n      setCenter(halfWay) */\n      setSpeeds(speeds.concat(chosenTram.VP.spd))\n      if (speeds.length > 1) {\n        let avgSpeed =\n          speeds.reduce((previous, current) => (current += previous)) /\n          speeds.length\n        let duration = distanceNow / avgSpeed\n        setDurations(durations.concat(duration))\n        console.log(durations)\n        let avgDuration = duration\n        let sum = 0\n        let counter = 0\n        if (durations.length > 1) {\n          for (let i = durations.length - 1; i >= 0; i--) {\n            sum += durations[i]\n            counter++\n            if (counter > 9) {\n              break\n            }\n          }\n          avgDuration = sum / counter\n        }\n        if (durations.length > 4 && chosenTram.VP.spd > 0) {\n          setAvgDuration(avgDuration)\n        }\n\n        console.log(\n          'DISTANCE NOW: ',\n          distanceNow,\n          ' m',\n          'AVG SPEED: ',\n          (avgSpeed * 3.6).toFixed(2),\n          ' km/h',\n          chosenTram.VP.spd,\n          ' m/s',\n          'ESTIMATED DURATION: ',\n          Math.floor(avgDuration / 60),\n          ' min',\n          (avgDuration % 60).toFixed(0),\n          ' sec'\n        )\n      }\n      if (distanceNow < 5) {\n        setAlarm(false)\n        setMyTram('')\n        setLine(0)\n        setSpeeds([])\n        setDurations([])\n        closeSidebar()\n        setShowAlert(true)\n      }\n      if (settings.showAlert) {\n        toggleAlertVariant()\n      }\n    }\n  }, [trams])\n\n  const handleChooseMyTram = veh => {\n    console.log('TRAM CHOSEN: ', veh)\n    if (veh !== 'reset') {\n      let chosenTram = trams.find(tram => tram.VP.veh == veh)\n      console.log('chosen Tram:', chosenTram)\n      setMyTram(chosenTram)\n      //setShowTrams([])\n      /* let halfWay = {\n        lat: (myStop.lat + chosenTram.VP.lat) / 2,\n        lng: (myStop.lon + chosenTram.VP.long) / 2,\n      }\n      setCenter(halfWay) */\n      //setCenter({ lat: chosenTram.VP.lat , lng: chosenTram.VP.long })\n      //setZoom(16)\n    } else {\n      setAlarm(false)\n      setMyTram('')\n      setLine(0)\n    }\n  }\n\n  const handleShowLine = line => {\n    console.log('LINE CHOSEN: ', line)\n    setShowTrams(trams.filter(tram => parseInt(tram.VP.desi) == line))\n    //setZoom(13)\n  }\n\n  const handleChooseStop = stopsGtfsId => {\n    console.log('STOP CHOSEN: ', stopsGtfsId)\n    setMyStop(stops.find(stop => stop.gtfsId === stopsGtfsId))\n  }\n\n  let tramsInOrder = [...trams]\n  tramsInOrder.sort(sortByVehicleNumbers)\n\n  const lineNumbers = []\n  trams.forEach(tram => {\n    if (!lineNumbers.includes(parseInt(tram.VP.desi))) {\n      lineNumbers.push(parseInt(tram.VP.desi))\n    }\n  })\n  lineNumbers.sort(sortLineNumbers)\n\n  const stopsInOrder = [...stops]\n  stopsInOrder.sort(sortStopNames)\n\n  const buttonVariant = 'secondary'\n\n  return (\n    <div style={style} className='sidebar' id='mySidebar'>\n      {show === 'menu'&&  \n          <Container>\n            {/* <Sound\n      url='https://actions.google.com/sounds/v1/alarms/beep_short.ogg'\n      playStatus={Sound.status.PLAYING}\n      playFromPosition={300}\n      volume={90}\n      onLoading={this.handleSongLoading}\n      onPlaying={this.handleSongPlaying}\n      onFinishedPlaying={this.handleSongFinishedPlaying}\n    />   */}\n\n            <Row>\n              <Col xs={12}>\n                <Dropdown>\n                  <Dropdown.Toggle variant={buttonVariant} id='dropdown-basic'>\n                    {!myStop\n                      ? 'Choose stop'\n                      : myStop.name + ' ' + myStop.gtfsId}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {stopsInOrder.map((stop, i) => (\n                      <Dropdown.Item\n                        key={i}\n                        onClick={() => handleChooseStop(stop.gtfsId)}\n                      >\n                        {stop.name} {stop.gtfsId}\n                      </Dropdown.Item>\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col xs={12}>\n                <Dropdown>\n                  <Dropdown.Toggle variant={buttonVariant} id='dropdown-basic'>\n                    {line > 0 ? 'Line: ' + line : 'Line?'}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {myTram.VP && (\n                      <Dropdown.Item\n                        onClick={() => handleChooseMyTram('reset')}\n                      >\n                        reset\n                      </Dropdown.Item>\n                    )}\n                    {lineNumbers.map((line, i) => (\n                      <Dropdown.Item key={i} onClick={() => setLine(line)}>\n                        {line}\n                      </Dropdown.Item>\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n            </Row>\n\n            {line > 0 && (\n              <Row>\n                <Col xs={12}>\n                  <Dropdown>\n                    <Dropdown.Toggle\n                      variant={buttonVariant}\n                      id='dropdown-basic'\n                    >\n                      {myTram.VP ? 'Vehicle: ' + myTram.VP.veh : 'Vehicle?'}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                      {myTram.VP && (\n                        <Dropdown.Item\n                          onClick={() => handleChooseMyTram('reset')}\n                        >\n                          reset\n                        </Dropdown.Item>\n                      )}\n                      {tramsInOrder\n                        .filter(\n                          tram =>\n                            tram.VP.desi == line ||\n                            tram.VP.desi == line + 'T' ||\n                            tram.VP.desi == line + 'H'\n                        )\n                        .map((tram, i) => (\n                          <Dropdown.Item\n                            key={i}\n                            onClick={() => handleChooseMyTram(tram.VP.veh)}\n                          >\n                            {tram.VP.veh}\n                          </Dropdown.Item>\n                        ))}\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </Col>\n              </Row>\n            )}\n\n            <Row>\n              {myTram.VP && myStop && (\n                <Col xs='12'>\n                  <Button variant={buttonVariant}>\n                    Distance:{' '}\n                    {distance(\n                      myStop.lat,\n                      myStop.lon,\n                      trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat,\n                      trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long\n                    )}\n                    {' m'} <br />\n                    {settings.avgDuration > 0 &&\n                      'Duration:' +\n                        Math.floor(settings.avgDuration / 60) +\n                        ' min' +\n                        (settings.avgDuration % 60).toFixed(0) +\n                        ' sec'}\n                  </Button>\n                </Col>\n              )}\n            </Row>\n\n            <Row>\n              {myTram.VP && (\n                <Col>\n                  <Button\n                    variant={!alarm ? buttonVariant : 'warning'}\n                    onClick={() => setAlarm(!alarm)}\n                  >\n                    {!alarm ? 'Set alarm' : 'Alarm off'}\n                  </Button>\n                </Col>\n              )}\n            </Row>\n\n            {trams.length !== showTrams.length && (\n              <Row>\n                <Col>\n                  <Button\n                    onClick={() => {\n                      setShowTrams(trams)\n                      //setZoom(13)\n                      //closeSidebar()\n                    }}\n                    variant={buttonVariant}\n                  >\n                    Show all trams\n                  </Button>\n                </Col>\n              </Row>\n            )}\n\n            {(myTram.VP || showTrams.length > 0) && (\n              <Row>\n                <Col>\n                  <Button\n                    onClick={() => setShowTrams([])}\n                    variant={buttonVariant}\n                  >\n                    Hide all trams\n                  </Button>\n                </Col>\n              </Row>\n            )}\n\n            <Row>\n              <Col>\n                <Dropdown>\n                  <Dropdown.Toggle variant={buttonVariant} id='dropdown-basic'>\n                    Show line\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {lineNumbers.map((line, i) => (\n                      <Dropdown.Item\n                        key={i}\n                        onClick={() => handleShowLine(line)}\n                      >\n                        {line}\n                      </Dropdown.Item>\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <Button\n                  variant={buttonVariant}\n                  onClick={() => setIsLogged(!isLogged)}\n                >\n                  {isLogged ? 'LOGOUT' : 'LOGIN'}\n                </Button>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <Button\n                  variant={buttonVariant}\n                  onClick={() => setShow('settings')}\n                >\n                  Settings\n                </Button>\n              </Col>\n            </Row>\n          </Container>}\n\n        {show === 'settings' && \n        <Container>\n          <Row>\n            <Col>\n              <Button onClick={() => setShow('menu')}>GO BACK TO MENU</Button>\n            </Col>\n          </Row>\n          </Container>}\n      \n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    trams: state.trams,\n    showTrams: state.showTrams,\n    showSidebar: state.showSidebar,\n    stops: state.stops,\n    myStop: state.myStop,\n    myTram: state.myTram,\n    settings: state.settings,\n  }\n}\n\nconst mapDispatchToProps = {\n  setShowTrams,\n  setMyStop,\n  setCenter,\n  setZoom,\n  setMyTram,\n  setShowAlert,\n  closeSidebar,\n  toggleAlertVariant,\n  setAvgDuration,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Sidebar)\n\n{\n  /* \n        <Form>\n          <Row>\n            <Col xs='auto'>\n              <Form.Group controlId='exampleForm.ControlSelect3'>\n                <Form.Label>My stop</Form.Label>\n                <Form.Control\n                  as='select'\n                  onChange={handleChooseStop}\n                  value={myStop.gtfsId}\n                >\n                  <option> - </option>\n                  {stopsInOrder.map((stop, i) => (\n                    <option key={i} value={stop.gtfsId}>\n                      {stop.name} {stop.gtfsId}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group controlId='exampleForm.ControlSelect1'>\n                <Form.Label>Choose tram</Form.Label>\n                <Form.Control as='select' onChange={handleChooseMyTram}>\n                  {!myTram.VP ? (\n                    <option> - </option>\n                  ) : (\n                    <option value='reset'>reset</option>\n                  )}\n                  {tramsInOrder.map((tram, i) => (\n                    <option key={i} value={tram.VP.veh}>\n                      line: {tram.VP.desi} veh:{tram.VP.veh}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n \n           <Row>\n            <Col sm={5}>\n              <Form.Group>\n                <Form.Check\n                  type='radio'\n                  label='All times'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios1'\n                />\n                <Form.Check\n                  type='radio'\n                  label='today'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios2'\n                />\n                <Form.Check\n                  type='radio'\n                  label='this week'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios3'\n                />\n              </Form.Group>\n            </Col>   \n          </Row> \n          <Row>\n          <Col>\n            <Form.Group controlId='exampleForm.ControlSelect2'>\n              <Form.Label>Show line</Form.Label>\n              <Form.Control as='select' onChange={handleShowLine}>\n                <option> - </option>\n                {lineNumbers.map((line, i) => (\n                  <option key={i} value={line}>\n                    {line}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Col>\n        </Row> \n        </Form> */\n}\n"]},"metadata":{},"sourceType":"module"}
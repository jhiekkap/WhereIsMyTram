{"ast":null,"code":"var _jsxFileName = \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { setTrams } from './reducers/tramsReducer';\nimport { setInit } from './reducers/settingsReducer';\nimport { setStops } from './reducers/stopsReducer';\nimport { setMyStop } from './reducers/myStopReducer';\nimport { setShowTrams } from './reducers/showTramsReducer';\nimport './App.css';\nimport LeafletMap from './components/LeafletMap';\nimport Sidebar from './components/Sidebar';\nimport client, { query } from './utils/client';\n\nconst App = ({\n  setTrams,\n  setShowTrams,\n  setStops,\n  setMyStop,\n  settings,\n  setInit\n}) => {\n  useEffect(() => {\n    client.query({\n      query\n    }).then(response => {\n      console.log('GRAPHQL - QUERY!');\n      let edges = response.data.stopsByRadius.edges;\n      let allStops = edges.map(edge => edge.node.stop).filter(stop => stop.vehicleType === 0);\n      setStops(allStops);\n      setMyStop(allStops[0]);\n    });\n  }, []);\n\n  const update = () => {\n    fetch('/trams').then(response => response.json()).then(body => {\n      setTrams(body);\n      /* if(settings.init){\n        console.log('INIT: ',settings.init, new Date())\n        setInit(false)\n       // setShowTrams(body)\n      } */\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  useState(() => {\n    const timer = setInterval(() => {\n      update();\n    }, 1000);\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Sidebar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(LeafletMap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    settings: state.settings\n  };\n};\n\nconst mapDispatchToProps = {\n  setTrams,\n  setStops,\n  setMyStop,\n  setShowTrams,\n  setInit\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App); ////////// GEOLOCATION\n\n/*   if (\"geolocation\" in navigator) {\n      console.log(\"geolocation is available\");\n    } else {\n      console.log(\"geolocation is NOT available\");\n    }\n    navigator.geolocation.getCurrentPosition(position => { \n  \n      const query = gql`\n        {\n          stopsByRadius(lat: ${position.coords.latitude}, lon: ${position.coords.longitude}, radius: 1000) {\n            edges {\n              node {\n                stop {\n                  id\n                  gtfsId\n                   name\n                  lat\n                  lon \n                }\n              }\n            }\n          }\n        }\n        ` \n      client.query({ query })\n        .then((response) => {\n          let edges = response.data.stopsByRadius.edges\n          setStops(edges)\n          edges.forEach(edge => {\n            console.log('HSL: ', edge.node.stop)\n          })\n        })\n      console.log(\"STARTING LOCATION \\nlatitude: \" + position.coords.latitude + \" longitude: \" + position.coords.longitude);\n    }); */","map":{"version":3,"sources":["/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/App.js"],"names":["React","useEffect","useState","connect","setTrams","setInit","setStops","setMyStop","setShowTrams","LeafletMap","Sidebar","client","query","App","settings","then","response","console","log","edges","data","stopsByRadius","allStops","map","edge","node","stop","filter","vehicleType","update","fetch","json","body","catch","error","timer","setInterval","mapStateToProps","state","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,IAAkBC,KAAlB,QAA+B,gBAA/B;;AAIA,MAAMC,GAAG,GAAG,CAAC;AACXT,EAAAA,QADW;AAEXI,EAAAA,YAFW;AAGXF,EAAAA,QAHW;AAIXC,EAAAA,SAJW;AAKXO,EAAAA,QALW;AAMXT,EAAAA;AANW,CAAD,KAON;AAEJJ,EAAAA,SAAS,CAAC,MAAM;AAEdU,IAAAA,MAAM,CAACC,KAAP,CAAa;AAAEA,MAAAA;AAAF,KAAb,EAAwBG,IAAxB,CAA6BC,QAAQ,IAAI;AACvCC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,UAAIC,KAAK,GAAGH,QAAQ,CAACI,IAAT,CAAcC,aAAd,CAA4BF,KAAxC;AACA,UAAIG,QAAQ,GAAGH,KAAK,CACjBI,GADY,CACRC,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUC,IADV,EAEZC,MAFY,CAELD,IAAI,IAAIA,IAAI,CAACE,WAAL,KAAqB,CAFxB,CAAf;AAGAtB,MAAAA,QAAQ,CAACgB,QAAD,CAAR;AACAf,MAAAA,SAAS,CAACe,QAAQ,CAAC,CAAD,CAAT,CAAT;AACD,KARD;AASD,GAXQ,EAWP,EAXO,CAAT;;AAaA,QAAMO,MAAM,GAAG,MAAM;AAEnBC,IAAAA,KAAK,CAAC,QAAD,CAAL,CACGf,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACe,IAAT,EADpB,EAEGhB,IAFH,CAEQiB,IAAI,IAAI;AACZ5B,MAAAA,QAAQ,CAAC4B,IAAD,CAAR;AAEA;;;;;AAKD,KAVH,EAWGC,KAXH,CAWSC,KAAK,IAAI;AACdjB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,KAAZ;AACD,KAbH;AAcD,GAhBD;;AAkBDhC,EAAAA,QAAQ,CAAC,MAAK;AACb,UAAMiC,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC9BP,MAAAA,MAAM;AACP,KAFwB,EAEtB,IAFsB,CAAzB;AAES,GAHF,EAGI,EAHJ,CAAR;AAKC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAnDD;;AAqDE,MAAMQ,eAAe,GAAGC,KAAK,IAAI;AACjC,SAAO;AACLxB,IAAAA,QAAQ,EAAEwB,KAAK,CAACxB;AADX,GAAP;AAGD,CAJC;;AAMF,MAAMyB,kBAAkB,GAAG;AACzBnC,EAAAA,QADyB;AAEzBE,EAAAA,QAFyB;AAGzBC,EAAAA,SAHyB;AAIzBC,EAAAA,YAJyB;AAKzBH,EAAAA;AALyB,CAA3B;AAQA,eAAeF,OAAO,CACpBkC,eADoB,EAEpBE,kBAFoB,CAAP,CAGb1B,GAHa,CAAf,C,CAWA;;AAEA","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { setTrams } from './reducers/tramsReducer' \nimport { setInit } from './reducers/settingsReducer'\nimport { setStops } from './reducers/stopsReducer'\nimport { setMyStop } from './reducers/myStopReducer'\nimport { setShowTrams } from './reducers/showTramsReducer' \nimport './App.css'\nimport LeafletMap from './components/LeafletMap'\nimport Sidebar from './components/Sidebar' \nimport client , { query } from './utils/client'\n\n \n\nconst App = ({\n  setTrams,\n  setShowTrams,  \n  setStops,\n  setMyStop,\n  settings,\n  setInit \n}) => {\n \n  useEffect(() => {\n  \n    client.query({ query }).then(response => {\n      console.log('GRAPHQL - QUERY!')\n      let edges = response.data.stopsByRadius.edges\n      let allStops = edges\n        .map(edge => edge.node.stop)\n        .filter(stop => stop.vehicleType === 0)\n      setStops(allStops)\n      setMyStop(allStops[0]) \n    })\n  },[])\n\n  const update = () => {\n    \n    fetch('/trams')\n      .then(response => response.json())\n      .then(body => {\n        setTrams(body) \n        \n        /* if(settings.init){\n          console.log('INIT: ',settings.init, new Date())\n          setInit(false)\n         // setShowTrams(body)\n        } */\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n useState(() =>{ \n  const timer = setInterval(() => { \n    update()\n  }, 1000)}, [])\n  \n  return (\n    <div> \n      <Sidebar />\n      <LeafletMap />\n    </div>\n  )\n}\n\n  const mapStateToProps = state => {\n  return {\n    settings: state.settings,\n  }\n}  \n\nconst mapDispatchToProps = {\n  setTrams,  \n  setStops,\n  setMyStop,\n  setShowTrams, \n  setInit,\n}\n\nexport default connect(\n  mapStateToProps, \n  mapDispatchToProps\n)(App)\n\n\n\n\n\n\n\n////////// GEOLOCATION\n\n/*   if (\"geolocation\" in navigator) {\n      console.log(\"geolocation is available\");\n    } else {\n      console.log(\"geolocation is NOT available\");\n    }\n    navigator.geolocation.getCurrentPosition(position => { \n  \n      const query = gql`\n        {\n          stopsByRadius(lat: ${position.coords.latitude}, lon: ${position.coords.longitude}, radius: 1000) {\n            edges {\n              node {\n                stop {\n                  id\n                  gtfsId\n                   name\n                  lat\n                  lon \n                }\n              }\n            }\n          }\n        }\n        ` \n      client.query({ query })\n        .then((response) => {\n          let edges = response.data.stopsByRadius.edges\n          setStops(edges)\n          edges.forEach(edge => {\n            console.log('HSL: ', edge.node.stop)\n          })\n        })\n      console.log(\"STARTING LOCATION \\nlatitude: \" + position.coords.latitude + \" longitude: \" + position.coords.longitude);\n    }); */\n"]},"metadata":{},"sourceType":"module"}
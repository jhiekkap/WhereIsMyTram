{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/App.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n      {\\n        stopsByRadius(lat: 60.170627, lon: 24.939946, radius: 200) {\\n          edges {\\n            node {\\n              stop {\\n                id\\n                gtfsId\\n                 name\\n                lat\\n                lon \\n              }\\n            }\\n          }\\n        }\\n      }\\n      \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setTrams } from './reducers/tramsReducer';\nimport { setShowSidebar } from './reducers/showSidebarReducer';\nimport { setShowSidebarOpenButton } from './reducers/showSidebarOpenButtonReducer';\nimport { setStops } from './reducers/stopsReducer';\nimport { setMyStop } from './reducers/myStopReducer';\nimport './App.css';\nimport LeafletMap from './components/LeafletMap';\nimport Sidebar from './components/Sidebar';\nimport ApolloClient, { gql } from 'apollo-boost';\nconst client = new ApolloClient({\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'\n});\nconst query = gql(_templateObject());\n\nconst App = ({\n  setTrams,\n  setShowSidebar,\n  setShowSidebarOpenButton,\n  stops,\n  setStops,\n  myStop,\n  setMyStop\n}) => {\n  console.log('rendering App!!!!!'); //const [center, setCenter] = useState({ lat: 60.170627, lng: 24.939946 })\n  //const [zoom, setZoom] = useState(16)\n  //const [stops, setStops] = useState([])\n  //const [myStop, setMyStop] = useState({})\n\n  useEffect(() => {\n    client.query({\n      query\n    }).then(response => {\n      let edges = response.data.stopsByRadius.edges;\n      let stopit = edges.map(edge => edge.node.stop); //setStops(stopit)\n\n      setMyStop(edges[0].node.stop);\n      console.log('EDGES: ', edges);\n      console.log('STOPIT: ', stopit);\n      console.log('EDGES[0]: ', edges[0].node.stop.name, edges[0].node.stop.gtfsId);\n      edges.forEach(edge => {\n        console.log('HSL: ', edge.node.stop);\n      });\n    });\n  });\n\n  const update = () => {\n    //fetch('http://localhost:3001/trams')\n    //console.log('STOPS: ', stops)\n    //console.log('MY STOP:', myStop)\n\n    /* if(myStop != {}){\n       setCenter({lat:myStop.node.stop.lat, lng:myStop.node.stop.lon}) \n    console.log()\n    }  */\n    fetch('/trams').then(response => response.json()).then(body => {\n      setTrams(body);\n    }).catch(error => {\n      console.log(error);\n    });\n  }; //useEffect(() => update(), [new Date()])\n\n\n  setInterval(() => {\n    update();\n  }, 1000);\n\n  const openSidebar = () => {\n    setShowSidebar(true);\n    setShowSidebarOpenButton(false);\n    console.log('open!');\n  };\n\n  const closeSidebar = () => {\n    setShowSidebar(false);\n    setTimeout(() => {\n      setShowSidebarOpenButton(true);\n    }, 300);\n    console.log('close!');\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Sidebar, {\n    closeSidebar: closeSidebar //setCenter={setCenter}\n    //setZoom={setZoom}\n    //stops={stops}\n    //myStop={myStop}\n    //setMyStop={setMyStop}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(LeafletMap, {\n    openSidebar: openSidebar,\n    closeSidebar: closeSidebar //center={center}\n    //zoom={zoom}\n    //stops={stops}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    stops: state.stops,\n    myStop: state.myStop\n  };\n};\n\nconst mapDispatchToProps = {\n  setTrams,\n  setShowSidebar,\n  setShowSidebarOpenButton,\n  setStops,\n  setMyStop\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App); ////////// GEOLOCATION\n\n/*   if (\"geolocation\" in navigator) {\n    console.log(\"geolocation is available\");\n  } else {\n    console.log(\"geolocation is NOT available\");\n  }\n  navigator.geolocation.getCurrentPosition(position => { \n\n    const query = gql`\n      {\n        stopsByRadius(lat: ${position.coords.latitude}, lon: ${position.coords.longitude}, radius: 1000) {\n          edges {\n            node {\n              stop {\n                id\n                gtfsId\n                 name\n                lat\n                lon \n              }\n            }\n          }\n        }\n      }\n      ` \n    client.query({ query })\n      .then((response) => {\n        let edges = response.data.stopsByRadius.edges\n        setStops(edges)\n        edges.forEach(edge => {\n          console.log('HSL: ', edge.node.stop)\n        })\n      })\n    console.log(\"STARTING LOCATION \\nlatitude: \" + position.coords.latitude + \" longitude: \" + position.coords.longitude);\n  }); */","map":{"version":3,"sources":["/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/App.js"],"names":["React","useState","useEffect","connect","setTrams","setShowSidebar","setShowSidebarOpenButton","setStops","setMyStop","LeafletMap","Sidebar","ApolloClient","gql","client","uri","query","App","stops","myStop","console","log","then","response","edges","data","stopsByRadius","stopit","map","edge","node","stop","name","gtfsId","forEach","update","fetch","json","body","catch","error","setInterval","openSidebar","closeSidebar","setTimeout","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { setTrams } from './reducers/tramsReducer'\nimport { setShowSidebar } from './reducers/showSidebarReducer'\nimport { setShowSidebarOpenButton } from './reducers/showSidebarOpenButtonReducer'\nimport { setStops } from './reducers/stopsReducer'\nimport { setMyStop } from './reducers/myStopReducer'\nimport './App.css'\nimport LeafletMap from './components/LeafletMap'\nimport Sidebar from './components/Sidebar'\nimport ApolloClient, { gql } from 'apollo-boost'\n\nconst client = new ApolloClient({\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'\n})\n\nconst query = gql`\n      {\n        stopsByRadius(lat: 60.170627, lon: 24.939946, radius: 200) {\n          edges {\n            node {\n              stop {\n                id\n                gtfsId\n                 name\n                lat\n                lon \n              }\n            }\n          }\n        }\n      }\n      `\n\n\n\nconst App = ({\n  setTrams,\n  setShowSidebar,\n  setShowSidebarOpenButton,\n  stops,\n  setStops,\n  myStop,\n  setMyStop\n}) => {\n\n  console.log('rendering App!!!!!')\n  //const [center, setCenter] = useState({ lat: 60.170627, lng: 24.939946 })\n  //const [zoom, setZoom] = useState(16)\n  //const [stops, setStops] = useState([])\n  //const [myStop, setMyStop] = useState({})\n\n  useEffect(() => {\n    \n    client.query({ query })\n      .then((response) => {\n        let edges = response.data.stopsByRadius.edges\n        let stopit = edges.map(edge => edge.node.stop)\n        //setStops(stopit)\n        setMyStop(edges[0].node.stop)\n        console.log('EDGES: ', edges)\n        console.log('STOPIT: ', stopit)\n        console.log('EDGES[0]: ',edges[0].node.stop.name, edges[0].node.stop.gtfsId)\n        edges.forEach(edge => {\n          console.log('HSL: ', edge.node.stop)\n        })\n      })\n  })\n\n \n  const update = () => {\n    //fetch('http://localhost:3001/trams')\n    //console.log('STOPS: ', stops)\n    //console.log('MY STOP:', myStop)\n     /* if(myStop != {}){\n        setCenter({lat:myStop.node.stop.lat, lng:myStop.node.stop.lon}) \n     console.log()\n    }  */\n    fetch('/trams')\n      .then(response => response.json())\n      .then(body => {\n        setTrams(body)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  //useEffect(() => update(), [new Date()])\n  setInterval(() => {\n    update()\n  }, 1000)\n\n  const openSidebar = () => {\n    setShowSidebar(true)\n    setShowSidebarOpenButton(false)\n    console.log('open!')\n  }\n\n  const closeSidebar = () => {\n    setShowSidebar(false)\n    setTimeout(() => {\n      setShowSidebarOpenButton(true)\n    }, 300)\n    console.log('close!')\n  }\n\n  return (\n    <div className='App'>\n      <Sidebar\n        closeSidebar={closeSidebar}\n        //setCenter={setCenter}\n        //setZoom={setZoom}\n      //stops={stops}\n      //myStop={myStop}\n      //setMyStop={setMyStop}\n      />\n      <LeafletMap\n        openSidebar={openSidebar}\n        closeSidebar={closeSidebar}\n        //center={center}\n        //zoom={zoom}\n      //stops={stops}\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    stops: state.stops,\n    myStop: state.myStop,\n  }\n}\n\nconst mapDispatchToProps = {\n  setTrams, setShowSidebar, setShowSidebarOpenButton, setStops, setMyStop\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n\n\n////////// GEOLOCATION\n\n  /*   if (\"geolocation\" in navigator) {\n      console.log(\"geolocation is available\");\n    } else {\n      console.log(\"geolocation is NOT available\");\n    }\n    navigator.geolocation.getCurrentPosition(position => { \n  \n      const query = gql`\n        {\n          stopsByRadius(lat: ${position.coords.latitude}, lon: ${position.coords.longitude}, radius: 1000) {\n            edges {\n              node {\n                stop {\n                  id\n                  gtfsId\n                   name\n                  lat\n                  lon \n                }\n              }\n            }\n          }\n        }\n        ` \n      client.query({ query })\n        .then((response) => {\n          let edges = response.data.stopsByRadius.edges\n          setStops(edges)\n          edges.forEach(edge => {\n            console.log('HSL: ', edge.node.stop)\n          })\n        })\n      console.log(\"STARTING LOCATION \\nlatitude: \" + position.coords.latitude + \" longitude: \" + position.coords.longitude);\n    }); */\n\n\n"]},"metadata":{},"sourceType":"module"}
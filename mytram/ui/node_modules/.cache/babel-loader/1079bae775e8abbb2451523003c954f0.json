{"ast":null,"code":"import _slicedToArray from \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/components/Sidebar.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setTrams } from '../reducers/tramsReducer';\nimport { setShowTrams } from '../reducers/showTramsReducer';\nimport { setMyStop } from '../reducers/myStopReducer';\nimport { setCenter, setZoom, setShowAlert, setShowSidebar, closeSidebar, toggleAlertVariant, setAvgDuration, setLine } from '../reducers/settingsReducer';\nimport { setMyTram } from '../reducers/myTramReducer';\nimport { Container, Row, Col, Button, Dropdown, Alert } from 'react-bootstrap';\nimport distance, { sortByVehicleNumbers, sortLineNumbers, sortStopNames } from '../utils/helpers';\nimport Sound from 'react-sound';\n\nconst Sidebar = ({\n  closeSidebar,\n  trams,\n  setTrams,\n  showTrams,\n  setShowTrams,\n  setCenter,\n  setZoom,\n  stops,\n  myStop,\n  setMyStop,\n  myTram,\n  setMyTram,\n  setShowAlert,\n  settings,\n  toggleAlertVariant,\n  setAvgDuration,\n  setLine\n}) => {\n  //const [line, setLine] = useState('')\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        alarm = _useState2[0],\n        setAlarm = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        speeds = _useState4[0],\n        setSpeeds = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        durations = _useState6[0],\n        setDurations = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isLogged = _useState8[0],\n        setIsLogged = _useState8[1];\n\n  const _useState9 = useState('menu'),\n        _useState10 = _slicedToArray(_useState9, 2),\n        show = _useState10[0],\n        setShow = _useState10[1];\n\n  const style = settings.showSidebar ? {\n    width: '250px'\n  } : {\n    width: '0'\n  };\n  useEffect(() => {\n    //console.log('SIDEBAR INIT', settings.init)\n    if (alarm) {\n      let chosenTram = trams.find(tram => tram.VP.veh === myTram.VP.veh);\n      let distanceNow = distance(myStop.lat, myStop.lon, chosenTram.VP.lat, chosenTram.VP.long);\n      /* let halfWay = {\n        lat: (myStop.lat + chosenTram.VP.lat) / 2,\n        lng: (myStop.lon + chosenTram.VP.long) / 2\n      }\n      setCenter(halfWay) */\n\n      setSpeeds(speeds.concat(chosenTram.VP.spd));\n\n      if (speeds.length > 1) {\n        let avgSpeed = speeds.reduce((previous, current) => current += previous) / speeds.length;\n        let duration = distanceNow / avgSpeed;\n        setDurations(durations.concat(duration));\n        console.log(durations);\n        let avgDuration = duration;\n        let sum = 0;\n        let counter = 0;\n\n        if (durations.length > 1) {\n          for (let i = durations.length - 1; i >= 0; i--) {\n            sum += durations[i];\n            counter++;\n\n            if (counter > 9) {\n              break;\n            }\n          }\n\n          avgDuration = sum / counter;\n        }\n\n        if (durations.length > 4 && chosenTram.VP.spd > 0) {\n          setAvgDuration(avgDuration);\n        }\n\n        console.log('DISTANCE NOW: ', distanceNow, ' m', 'AVG SPEED: ', (avgSpeed * 3.6).toFixed(2), ' km/h', chosenTram.VP.spd, ' m/s', 'ESTIMATED DURATION: ', Math.floor(avgDuration / 60), ' min', (avgDuration % 60).toFixed(0), ' sec');\n      }\n\n      if (distanceNow < 5) {\n        setAlarm(false);\n        setMyTram('');\n        setLine(0);\n        setSpeeds([]);\n        setDurations([]);\n        closeSidebar();\n        setShowAlert(true);\n      }\n\n      if (settings.showAlert) {\n        toggleAlertVariant();\n      }\n    }\n  }, [trams]);\n\n  const handleChooseMyTram = veh => {\n    console.log('TRAM CHOSEN: ', veh);\n\n    if (veh !== 'reset') {\n      let chosenTram = trams.find(tram => tram.VP.veh == veh);\n      console.log('chosen Tram:', chosenTram);\n      setTrams([]);\n      setMyTram(chosenTram);\n\n      if (!showTrams.map(tram => tram.VP.veh).includes(chosenTram.VP.veh)) {\n        setShowTrams(showTrams.concat(chosenTram));\n      } //setShowTrams([])\n\n      /* let halfWay = {\n        lat: (myStop.lat + chosenTram.VP.lat) / 2,\n        lng: (myStop.lon + chosenTram.VP.long) / 2,\n      }\n      setCenter(halfWay) */\n\n\n      setCenter({\n        lat: chosenTram.VP.lat,\n        lng: chosenTram.VP.long\n      }); //setZoom(16)\n    } else {\n      setAlarm(false);\n      setMyTram('');\n      setLine('');\n    }\n  };\n\n  const handleShowLine = line => {\n    console.log('LINE CHOSEN: ', line);\n    setShowTrams(trams.filter(tram => parseInt(tram.VP.desi) == line)); //setZoom(13)\n  };\n\n  const handleChooseStop = stopsGtfsId => {\n    console.log('STOP CHOSEN: ', stopsGtfsId);\n    setMyStop(stops.find(stop => stop.gtfsId === stopsGtfsId));\n  };\n\n  let tramsInOrder = [...trams];\n  tramsInOrder.sort(sortByVehicleNumbers);\n  const lineNumbers = [];\n  trams.forEach(tram => {\n    if (!lineNumbers.includes(parseInt(tram.VP.desi))) {\n      lineNumbers.push(parseInt(tram.VP.desi));\n    }\n  });\n  lineNumbers.sort(sortLineNumbers);\n  const stopsInOrder = [...stops];\n  stopsInOrder.sort(sortStopNames);\n  const buttonVariant = 'secondary';\n  return React.createElement(\"div\", {\n    style: style,\n    className: \"sidebar\",\n    id: \"mySidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, show === 'menu' && React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: buttonVariant,\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, !myStop ? 'Choose stop' : myStop.name + ' ' + myStop.gtfsId), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, stopsInOrder.map((stop, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleChooseStop(stop.gtfsId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, stop.name, \" \", stop.gtfsId)))))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: buttonVariant,\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, settings.line != '' ? 'Line: ' + settings.line : 'Line?'), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, myTram.VP && React.createElement(Dropdown.Item, {\n    onClick: () => handleChooseMyTram('reset'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, \"reset\"), lineNumbers.map((line, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => {\n      setLine(line);\n      setMyTram('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, line)))))), settings.line != '' && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: buttonVariant,\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, myTram.VP ? 'Vehicle: ' + myTram.VP.veh : 'Vehicle?'), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, myTram.VP && React.createElement(Dropdown.Item, {\n    onClick: () => handleChooseMyTram('reset'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, \"reset\"), tramsInOrder.filter(tram => tram.VP.desi == settings.line || tram.VP.desi == settings.line + 'T' || tram.VP.desi == settings.line + 'H').map((tram, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleChooseMyTram(tram.VP.veh),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, tram.VP.veh)))))), myTram.VP && myStop && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: buttonVariant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, \"Distance:\", ' ', distance(myStop.lat, myStop.lon, trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat, trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long), ' m', \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }), settings.avgDuration > 0 && 'Duration:' + Math.floor(settings.avgDuration / 60) + ' min' + (settings.avgDuration % 60).toFixed(0) + ' sec'))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }, myTram.VP && React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: !alarm ? buttonVariant : 'warning',\n    onClick: () => setAlarm(!alarm),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, !alarm ? 'Set alarm' : 'Alarm off'))), trams.length !== showTrams.length && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => {\n      setShowTrams(trams); //setZoom(13)\n      //closeSidebar()\n    },\n    variant: buttonVariant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307\n    },\n    __self: this\n  }, \"Show all trams\"))), (myTram.VP || showTrams.length > 0) && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setShowTrams([]),\n    variant: buttonVariant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  }, \"Hide all trams\"))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: buttonVariant,\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337\n    },\n    __self: this\n  }, \"Show line\"), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, lineNumbers.map((line, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleShowLine(line),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }, line)))))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: buttonVariant,\n    onClick: () => setIsLogged(!isLogged),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }, isLogged ? 'LOGOUT' : 'LOGIN'))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: buttonVariant,\n    onClick: () => setShow('settings'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367\n    },\n    __self: this\n  }, \"Settings\")))), show === 'settings' && React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setShow('menu'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381\n    },\n    __self: this\n  }, \"GO BACK TO MENU\")))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    trams: state.trams,\n    showTrams: state.showTrams,\n    showSidebar: state.showSidebar,\n    stops: state.stops,\n    myStop: state.myStop,\n    myTram: state.myTram,\n    settings: state.settings\n  };\n};\n\nconst mapDispatchToProps = {\n  setShowTrams,\n  setMyStop,\n  setCenter,\n  setZoom,\n  setMyTram,\n  setShowAlert,\n  closeSidebar,\n  toggleAlertVariant,\n  setAvgDuration,\n  setLine,\n  setTrams\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);","map":{"version":3,"sources":["/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/components/Sidebar.js"],"names":["React","useState","useEffect","connect","setTrams","setShowTrams","setMyStop","setCenter","setZoom","setShowAlert","setShowSidebar","closeSidebar","toggleAlertVariant","setAvgDuration","setLine","setMyTram","Container","Row","Col","Button","Dropdown","Alert","distance","sortByVehicleNumbers","sortLineNumbers","sortStopNames","Sound","Sidebar","trams","showTrams","stops","myStop","myTram","settings","alarm","setAlarm","speeds","setSpeeds","durations","setDurations","isLogged","setIsLogged","show","setShow","style","showSidebar","width","chosenTram","find","tram","VP","veh","distanceNow","lat","lon","long","concat","spd","length","avgSpeed","reduce","previous","current","duration","console","log","avgDuration","sum","counter","i","toFixed","Math","floor","showAlert","handleChooseMyTram","map","includes","lng","handleShowLine","line","filter","parseInt","desi","handleChooseStop","stopsGtfsId","stop","gtfsId","tramsInOrder","sort","lineNumbers","forEach","push","stopsInOrder","buttonVariant","name","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { setTrams } from '../reducers/tramsReducer'\nimport { setShowTrams } from '../reducers/showTramsReducer'\nimport { setMyStop } from '../reducers/myStopReducer'\nimport { setCenter, setZoom, setShowAlert, setShowSidebar, closeSidebar,toggleAlertVariant,\n  setAvgDuration, setLine\n} from '../reducers/settingsReducer'\nimport { setMyTram } from '../reducers/myTramReducer'\nimport { Container, Row, Col, Button, Dropdown, Alert } from 'react-bootstrap'\nimport distance, {\n  sortByVehicleNumbers,\n  sortLineNumbers,\n  sortStopNames,\n} from '../utils/helpers'\nimport Sound from 'react-sound'\n\nconst Sidebar = ({\n  closeSidebar,\n  trams,\n  setTrams,\n  showTrams,\n  setShowTrams,\n  setCenter,\n  setZoom,\n  stops,\n  myStop,\n  setMyStop,\n  myTram,\n  setMyTram,\n  setShowAlert,\n  settings,\n  toggleAlertVariant,\n  setAvgDuration,\n  setLine\n}) => {\n  //const [line, setLine] = useState('')\n  const [alarm, setAlarm] = useState(false)\n  const [speeds, setSpeeds] = useState([])\n  const [durations, setDurations] = useState([])\n  const [isLogged, setIsLogged] = useState(false)\n  const [show, setShow] = useState('menu')\n\n  const style = settings.showSidebar ? { width: '250px' } : { width: '0' }\n\n  useEffect(() => {\n    //console.log('SIDEBAR INIT', settings.init)\n    if (alarm) {\n      let chosenTram = trams.find(tram => tram.VP.veh === myTram.VP.veh)\n      let distanceNow = distance(\n        myStop.lat,\n        myStop.lon,\n        chosenTram.VP.lat,\n        chosenTram.VP.long\n      )\n      /* let halfWay = {\n        lat: (myStop.lat + chosenTram.VP.lat) / 2,\n        lng: (myStop.lon + chosenTram.VP.long) / 2\n      }\n      setCenter(halfWay) */\n      setSpeeds(speeds.concat(chosenTram.VP.spd))\n      if (speeds.length > 1) {\n        let avgSpeed =\n          speeds.reduce((previous, current) => (current += previous)) /\n          speeds.length\n        let duration = distanceNow / avgSpeed\n        setDurations(durations.concat(duration))\n        console.log(durations)\n        let avgDuration = duration\n        let sum = 0\n        let counter = 0\n        if (durations.length > 1) {\n          for (let i = durations.length - 1; i >= 0; i--) {\n            sum += durations[i]\n            counter++\n            if (counter > 9) {\n              break\n            }\n          }\n          avgDuration = sum / counter\n        }\n        if (durations.length > 4 && chosenTram.VP.spd > 0) {\n          setAvgDuration(avgDuration)\n        }\n\n        console.log(\n          'DISTANCE NOW: ',\n          distanceNow,\n          ' m',\n          'AVG SPEED: ',\n          (avgSpeed * 3.6).toFixed(2),\n          ' km/h',\n          chosenTram.VP.spd,\n          ' m/s',\n          'ESTIMATED DURATION: ',\n          Math.floor(avgDuration / 60),\n          ' min',\n          (avgDuration % 60).toFixed(0),\n          ' sec'\n        )\n      }\n      if (distanceNow < 5) {\n        setAlarm(false)\n        setMyTram('')\n        setLine(0)\n        setSpeeds([])\n        setDurations([])\n        closeSidebar()\n        setShowAlert(true)\n      }\n      if (settings.showAlert) {\n        toggleAlertVariant()\n      }\n    }\n  }, [trams])\n\n  const handleChooseMyTram = veh => {\n    console.log('TRAM CHOSEN: ', veh)\n    if (veh !== 'reset') {\n      let chosenTram = trams.find(tram => tram.VP.veh == veh)\n      console.log('chosen Tram:', chosenTram)\n      setTrams([])\n      setMyTram(chosenTram)\n      if(!showTrams.map(tram => tram.VP.veh).includes(chosenTram.VP.veh)){\n        setShowTrams(showTrams.concat(chosenTram))\n      }\n      //setShowTrams([])\n      /* let halfWay = {\n        lat: (myStop.lat + chosenTram.VP.lat) / 2,\n        lng: (myStop.lon + chosenTram.VP.long) / 2,\n      }\n      setCenter(halfWay) */\n      setCenter({ lat: chosenTram.VP.lat , lng: chosenTram.VP.long })\n      //setZoom(16)\n    } else {\n      setAlarm(false)\n      setMyTram('')\n      setLine('')\n    }\n  }\n\n  const handleShowLine = line => {\n    console.log('LINE CHOSEN: ', line)\n    setShowTrams(trams.filter(tram => parseInt(tram.VP.desi) == line))\n    //setZoom(13)\n  }\n\n  const handleChooseStop = stopsGtfsId => {\n    console.log('STOP CHOSEN: ', stopsGtfsId)\n    setMyStop(stops.find(stop => stop.gtfsId === stopsGtfsId))\n  }\n\n  let tramsInOrder = [...trams]\n  tramsInOrder.sort(sortByVehicleNumbers)\n\n  const lineNumbers = []\n  trams.forEach(tram => {\n    if (!lineNumbers.includes(parseInt(tram.VP.desi))) {\n      lineNumbers.push(parseInt(tram.VP.desi))\n    }\n  })\n  lineNumbers.sort(sortLineNumbers)\n\n  const stopsInOrder = [...stops]\n  stopsInOrder.sort(sortStopNames)\n\n  const buttonVariant = 'secondary'\n\n  return (\n    <div style={style} className='sidebar' id='mySidebar'>\n      {show === 'menu'&&  \n          <Container>\n            {/* <Sound\n      url='https://actions.google.com/sounds/v1/alarms/beep_short.ogg'\n      playStatus={Sound.status.PLAYING}\n      playFromPosition={300}\n      volume={90}\n      onLoading={this.handleSongLoading}\n      onPlaying={this.handleSongPlaying}\n      onFinishedPlaying={this.handleSongFinishedPlaying}\n    />   */}\n\n            <Row>\n              <Col xs={12}>\n                <Dropdown>\n                  <Dropdown.Toggle variant={buttonVariant} id='dropdown-basic'>\n                    {!myStop\n                      ? 'Choose stop'\n                      : myStop.name + ' ' + myStop.gtfsId}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {stopsInOrder.map((stop, i) => (\n                      <Dropdown.Item\n                        key={i}\n                        onClick={() => handleChooseStop(stop.gtfsId)}\n                      >\n                        {stop.name} {stop.gtfsId}\n                      </Dropdown.Item>\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col xs={12}>\n                <Dropdown>\n                  <Dropdown.Toggle variant={buttonVariant} id='dropdown-basic'>\n                    {settings.line != '' ? 'Line: ' + settings.line : 'Line?'}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {myTram.VP && (\n                      <Dropdown.Item\n                        onClick={() => handleChooseMyTram('reset')}\n                      >\n                        reset\n                      </Dropdown.Item>\n                    )}\n                    {lineNumbers.map((line, i) => (\n                      <Dropdown.Item \n                      key={i} \n                      onClick={() => {setLine(line);setMyTram('')}}>\n                        {line}\n                      </Dropdown.Item>\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n            </Row>\n\n            {settings.line != '' && (\n              <Row>\n                <Col xs={12}>\n                  <Dropdown>\n                    <Dropdown.Toggle\n                      variant={buttonVariant}\n                      id='dropdown-basic'\n                    >\n                      {myTram.VP ? 'Vehicle: ' + myTram.VP.veh : 'Vehicle?'}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                      {myTram.VP && (\n                        <Dropdown.Item\n                          onClick={() => handleChooseMyTram('reset')}\n                        >\n                          reset\n                        </Dropdown.Item>\n                      )}\n                      {tramsInOrder\n                        .filter(\n                          tram =>\n                            tram.VP.desi == settings.line ||\n                            tram.VP.desi == settings.line + 'T' ||\n                            tram.VP.desi == settings.line + 'H'\n                        )\n                        .map((tram, i) => (\n                          <Dropdown.Item\n                            key={i}\n                            onClick={() => handleChooseMyTram(tram.VP.veh)}\n                          >\n                            {tram.VP.veh}\n                          </Dropdown.Item>\n                        ))}\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </Col>\n              </Row>\n            )}\n            {myTram.VP && myStop && \n             <Row> \n                <Col xs='12'>\n                  <Button variant={buttonVariant}>\n                    Distance:{' '}\n                    {distance(\n                      myStop.lat,\n                      myStop.lon,\n                      trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat,\n                      trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long\n                    )}\n                    {' m'} <br />\n                    {settings.avgDuration > 0 &&\n                      'Duration:' +\n                        Math.floor(settings.avgDuration / 60) +\n                        ' min' +\n                        (settings.avgDuration % 60).toFixed(0) +\n                        ' sec'}\n                  </Button>\n                </Col> \n            </Row>}\n\n            <Row>\n              {myTram.VP && (\n                <Col>\n                  <Button\n                    variant={!alarm ? buttonVariant : 'warning'}\n                    onClick={() => setAlarm(!alarm)}\n                  >\n                    {!alarm ? 'Set alarm' : 'Alarm off'}\n                  </Button>\n                </Col>\n              )}\n            </Row>\n\n            {trams.length !== showTrams.length && (\n              <Row>\n                <Col>\n                  <Button\n                    onClick={() => {\n                      setShowTrams(trams)\n                      //setZoom(13)\n                      //closeSidebar()\n                    }}\n                    variant={buttonVariant}\n                  >\n                    Show all trams\n                  </Button>\n                </Col>\n              </Row>\n            )}\n\n            {(myTram.VP || showTrams.length > 0) && (\n              <Row>\n                <Col>\n                  <Button\n                    onClick={() => setShowTrams([])}\n                    variant={buttonVariant}\n                  >\n                    Hide all trams\n                  </Button>\n                </Col>\n              </Row>\n            )}\n\n            <Row>\n              <Col>\n                <Dropdown>\n                  <Dropdown.Toggle variant={buttonVariant} id='dropdown-basic'>\n                    Show line\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {lineNumbers.map((line, i) => (\n                      <Dropdown.Item\n                        key={i}\n                        onClick={() => handleShowLine(line)}\n                      >\n                        {line}\n                      </Dropdown.Item>\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <Button\n                  variant={buttonVariant}\n                  onClick={() => setIsLogged(!isLogged)}\n                >\n                  {isLogged ? 'LOGOUT' : 'LOGIN'}\n                </Button>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <Button\n                  variant={buttonVariant}\n                  onClick={() => setShow('settings')}\n                >\n                  Settings\n                </Button>\n              </Col>\n            </Row>\n          </Container>}\n\n        {show === 'settings' && \n        <Container>\n          <Row>\n            <Col>\n              <Button onClick={() => setShow('menu')}>GO BACK TO MENU</Button>\n            </Col>\n          </Row>\n          </Container>}\n      \n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    trams: state.trams,\n    showTrams: state.showTrams,\n    showSidebar: state.showSidebar,\n    stops: state.stops,\n    myStop: state.myStop,\n    myTram: state.myTram,\n    settings: state.settings,\n  }\n}\n\nconst mapDispatchToProps = {\n  setShowTrams,\n  setMyStop,\n  setCenter,\n  setZoom,\n  setMyTram,\n  setShowAlert,\n  closeSidebar,\n  toggleAlertVariant,\n  setAvgDuration,\n  setLine,\n  setTrams\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Sidebar)\n\n\n   "]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/components/Sidebar.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { setShowTrams } from '../reducers/showTramsReducer';\nimport { setMyStop } from '../reducers/myStopReducer';\nimport { setCenter } from '../reducers/centerReducer';\nimport { setZoom } from '../reducers/zoomReducer';\nimport { setMyTram } from '../reducers/myTramReducer';\nimport { Container, Row, Col, Form, Button, Dropdown } from 'react-bootstrap';\nimport distance, { sortByLineNumbers, sortLineNumbers, sortStopNames } from '../utils/helpers';\n\nconst Sidebar = ({\n  closeSidebar,\n  showSidebar,\n  trams,\n  //showTrams,\n  setShowTrams,\n  setCenter,\n  setZoom,\n  stops,\n  myStop,\n  setMyStop,\n  myTram,\n  setMyTram\n}) => {\n  const style = showSidebar ? {\n    width: '250px'\n  } : {\n    width: '0'\n  };\n\n  const handleChooseMyTram = veh => {\n    console.log('TRAM CHOSEN: ', veh);\n\n    if (veh !== 'reset') {\n      let chosenTram = trams.find(tram => tram.VP.veh == veh);\n      console.log('chosen Tram:', chosenTram);\n      setMyTram(chosenTram);\n      setShowTrams([]);\n      setCenter({\n        lat: chosenTram.VP.lat,\n        lng: chosenTram.VP.long\n      }); //setZoom(16)\n    } else {\n      setMyTram('');\n    }\n  };\n\n  const handleShowLine = e => {\n    console.log('LINE CHOSEN: ', e.target.value);\n\n    if (e.target.value !== '-') {\n      setShowTrams(trams.filter(tram => parseInt(tram.VP.desi) == e.target.value));\n      setZoom(13);\n    }\n  };\n\n  const handleChooseStop = stopsGtfsId => {\n    console.log('STOP CHOSEN: ', stopsGtfsId);\n    setMyStop(stops.find(stop => stop.gtfsId === stopsGtfsId));\n  };\n\n  let tramsInOrder = [...trams];\n  tramsInOrder.sort(sortByLineNumbers);\n  const lineNumbers = [];\n  trams.forEach(tram => {\n    if (!lineNumbers.includes(parseInt(tram.VP.desi))) {\n      lineNumbers.push(parseInt(tram.VP.desi));\n    }\n  });\n  lineNumbers.sort(sortLineNumbers);\n  const stopsInOrder = [...stops];\n  stopsInOrder.sort(sortStopNames);\n  return React.createElement(\"div\", {\n    style: style,\n    className: \"sidebar\",\n    id: \"mySidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, !myStop ? 'CHOOSE STOP' : myStop.name + ' ' + myStop.gtfsId), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, stopsInOrder.map((stop, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleChooseStop(stop.gtfsId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, stop.name, \" \", stop.gtfsId)))), React.createElement(Dropdown\n  /* id='tramDropdown' */\n  , {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, myTram.VP ? 'line: ' + myTram.VP.desi + ' vehicle: ' + myTram.VP.veh : 'Choose tram'), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, !myTram.VP ? React.createElement(Dropdown.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \" - \") : React.createElement(Dropdown.Item, {\n    onClick: () => handleChooseMyTram('reset'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"reset\"), tramsInOrder.map((tram, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleChooseMyTram(tram.VP.veh),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"line: \", tram.VP.desi, \" veh:\", tram.VP.veh)))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, myTram.VP && myStop && React.createElement(Col, {\n    xs: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Distance:\", ' ', distance(myStop.lat, myStop.lon, trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat, trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long).toFixed(2), ' ', \"km\")), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => {\n      setShowTrams(trams);\n      setZoom(13);\n      closeSidebar();\n    },\n    variant: \"outline-secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"show all trams\"))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setShowTrams([]),\n    variant: \"outline-secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"hide all trams\"))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    controlId: \"exampleForm.ControlSelect2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"Show line\"), React.createElement(Form.Control, {\n    as: \"select\",\n    onChange: handleShowLine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \" - \"), lineNumbers.map((line, i) => React.createElement(\"option\", {\n    key: i,\n    value: line,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, line))))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    trams: state.trams,\n    //showTrams: state.showTrams,\n    showSidebar: state.showSidebar,\n    stops: state.stops,\n    myStop: state.myStop,\n    myTram: state.myTram\n  };\n};\n\nconst mapDispatchToProps = {\n  setShowTrams,\n  setMyStop,\n  setCenter,\n  setZoom,\n  setMyTram\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\n{\n  /* \n         <Form>\n           <Row>\n             <Col xs='auto'>\n               <Form.Group controlId='exampleForm.ControlSelect3'>\n                 <Form.Label>My stop</Form.Label>\n                 <Form.Control\n                   as='select'\n                   onChange={handleChooseStop}\n                   value={myStop.gtfsId}\n                 >\n                   <option> - </option>\n                   {stopsInOrder.map((stop, i) => (\n                     <option key={i} value={stop.gtfsId}>\n                       {stop.name} {stop.gtfsId}\n                     </option>\n                   ))}\n                 </Form.Control>\n               </Form.Group>\n             </Col>\n           </Row>\n           <Row>\n             <Col>\n               <Form.Group controlId='exampleForm.ControlSelect1'>\n                 <Form.Label>Choose tram</Form.Label>\n                 <Form.Control as='select' onChange={handleChooseMyTram}>\n                   {!myTram.VP ? (\n                     <option> - </option>\n                   ) : (\n                     <option value='reset'>reset</option>\n                   )}\n                   {tramsInOrder.map((tram, i) => (\n                     <option key={i} value={tram.VP.veh}>\n                       line: {tram.VP.desi} veh:{tram.VP.veh}\n                     </option>\n                   ))}\n                 </Form.Control>\n               </Form.Group>\n             </Col>\n           </Row>\n  \n            <Row>\n             <Col sm={5}>\n               <Form.Group>\n                 <Form.Check\n                   type='radio'\n                   label='All times'\n                   name='formHorizontalRadios'\n                   id='formHorizontalRadios1'\n                 />\n                 <Form.Check\n                   type='radio'\n                   label='today'\n                   name='formHorizontalRadios'\n                   id='formHorizontalRadios2'\n                 />\n                 <Form.Check\n                   type='radio'\n                   label='this week'\n                   name='formHorizontalRadios'\n                   id='formHorizontalRadios3'\n                 />\n               </Form.Group>\n             </Col>   \n           </Row> \n         </Form> */\n}","map":{"version":3,"sources":["/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/components/Sidebar.js"],"names":["React","connect","setShowTrams","setMyStop","setCenter","setZoom","setMyTram","Container","Row","Col","Form","Button","Dropdown","distance","sortByLineNumbers","sortLineNumbers","sortStopNames","Sidebar","closeSidebar","showSidebar","trams","stops","myStop","myTram","style","width","handleChooseMyTram","veh","console","log","chosenTram","find","tram","VP","lat","lng","long","handleShowLine","e","target","value","filter","parseInt","desi","handleChooseStop","stopsGtfsId","stop","gtfsId","tramsInOrder","sort","lineNumbers","forEach","includes","push","stopsInOrder","name","map","i","lon","toFixed","line","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { setShowTrams } from '../reducers/showTramsReducer'\nimport { setMyStop } from '../reducers/myStopReducer'\nimport { setCenter } from '../reducers/centerReducer'\nimport { setZoom } from '../reducers/zoomReducer'\nimport { setMyTram } from '../reducers/myTramReducer'\nimport { Container, Row, Col, Form, Button, Dropdown } from 'react-bootstrap'\nimport distance, {\n  sortByLineNumbers,\n  sortLineNumbers,\n  sortStopNames,\n} from '../utils/helpers'\n \nconst Sidebar = ({\n  closeSidebar,\n  showSidebar,\n  trams,\n  //showTrams,\n  setShowTrams,\n  setCenter,\n  setZoom,\n  stops,\n  myStop,\n  setMyStop,\n  myTram,\n  setMyTram,\n}) => {\n  const style = showSidebar ? { width: '250px' } : { width: '0' }\n\n  const handleChooseMyTram = veh => {\n    console.log('TRAM CHOSEN: ', veh)\n    if (veh !== 'reset') {\n      let chosenTram = trams.find(tram => tram.VP.veh == veh)\n      console.log('chosen Tram:', chosenTram)\n      setMyTram(chosenTram)\n      setShowTrams([])\n      setCenter({ lat: chosenTram.VP.lat, lng: chosenTram.VP.long })\n      //setZoom(16)\n    } else {\n      setMyTram('')\n    }\n  }\n\n  const handleShowLine = e => {\n    console.log('LINE CHOSEN: ', e.target.value)\n    if (e.target.value !== '-') {\n      setShowTrams(\n        trams.filter(tram => parseInt(tram.VP.desi) == e.target.value)\n      )\n      setZoom(13)\n    }\n  }\n \n\n  const handleChooseStop = stopsGtfsId => {\n    console.log('STOP CHOSEN: ', stopsGtfsId)\n    setMyStop(stops.find(stop => stop.gtfsId === stopsGtfsId))\n  }\n\n  let tramsInOrder = [...trams]\n  tramsInOrder.sort(sortByLineNumbers)\n\n  const lineNumbers = []\n  trams.forEach(tram => {\n    if (!lineNumbers.includes(parseInt(tram.VP.desi))) {\n      lineNumbers.push(parseInt(tram.VP.desi))\n    }\n  })\n  lineNumbers.sort(sortLineNumbers)\n\n  const stopsInOrder = [...stops]\n  stopsInOrder.sort(sortStopNames)\n\n  return (\n    <div style={style} className='sidebar' id='mySidebar' >\n      <Container>\n        <Row>\n          \n        </Row>\n        <Dropdown>\n          <Dropdown.Toggle variant='success' id='dropdown-basic'>\n            {!myStop ? 'CHOOSE STOP' : myStop.name + ' ' + myStop.gtfsId}\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            {stopsInOrder.map((stop, i) => (\n              <Dropdown.Item\n                key={i}\n                onClick={() => handleChooseStop(stop.gtfsId)}\n              >\n                {stop.name} {stop.gtfsId}\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n        <Dropdown /* id='tramDropdown' */>\n          <Dropdown.Toggle variant='success' id='dropdown-basic'>\n            {myTram.VP\n              ? 'line: ' + myTram.VP.desi + ' vehicle: ' + myTram.VP.veh\n              : 'Choose tram'}\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu>\n            {!myTram.VP ? (\n              <Dropdown.Item> - </Dropdown.Item>\n            ) : (\n              <Dropdown.Item onClick={() => handleChooseMyTram('reset')}>\n                reset\n              </Dropdown.Item>\n            )}\n            {tramsInOrder.map((tram, i) => (\n              <Dropdown.Item\n                key={i}\n                onClick={() => handleChooseMyTram(tram.VP.veh)}\n              >\n                line: {tram.VP.desi} veh:{tram.VP.veh}\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n\n        <Row>\n          {myTram.VP && myStop && (\n            <Col xs='auto'>\n              Distance:{' '}\n              {distance(\n                myStop.lat,\n                myStop.lon,\n                trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat,\n                trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long\n              ).toFixed(2)}{' '}\n              km\n            </Col>\n          )}\n        </Row>\n\n        <Row>\n          <Col>\n            <Button\n              onClick={() => {\n                setShowTrams(trams)\n                setZoom(13)\n                closeSidebar()\n              }}\n              variant='outline-secondary'\n            >\n              show all trams\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button\n              onClick={() => setShowTrams([])}\n              variant='outline-secondary'\n            >\n              hide all trams\n            </Button>\n          </Col>\n        </Row>\n\n        <Row>\n            <Col>\n              <Form.Group controlId='exampleForm.ControlSelect2'>\n                <Form.Label>Show line</Form.Label>\n                <Form.Control as='select' onChange={handleShowLine}>\n                  <option> - </option>\n                  {lineNumbers.map((line, i) => (\n                    <option key={i} value={line}>\n                      {line}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n\n      </Container>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    trams: state.trams,\n    //showTrams: state.showTrams,\n    showSidebar: state.showSidebar,\n    stops: state.stops,\n    myStop: state.myStop,\n    myTram: state.myTram,\n  }\n}\n\nconst mapDispatchToProps = {\n  setShowTrams,\n  setMyStop,\n  setCenter,\n  setZoom,\n  setMyTram,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Sidebar)\n\n\n\n\n\n\n{/* \n        <Form>\n          <Row>\n            <Col xs='auto'>\n              <Form.Group controlId='exampleForm.ControlSelect3'>\n                <Form.Label>My stop</Form.Label>\n                <Form.Control\n                  as='select'\n                  onChange={handleChooseStop}\n                  value={myStop.gtfsId}\n                >\n                  <option> - </option>\n                  {stopsInOrder.map((stop, i) => (\n                    <option key={i} value={stop.gtfsId}>\n                      {stop.name} {stop.gtfsId}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group controlId='exampleForm.ControlSelect1'>\n                <Form.Label>Choose tram</Form.Label>\n                <Form.Control as='select' onChange={handleChooseMyTram}>\n                  {!myTram.VP ? (\n                    <option> - </option>\n                  ) : (\n                    <option value='reset'>reset</option>\n                  )}\n                  {tramsInOrder.map((tram, i) => (\n                    <option key={i} value={tram.VP.veh}>\n                      line: {tram.VP.desi} veh:{tram.VP.veh}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n \n           <Row>\n            <Col sm={5}>\n              <Form.Group>\n                <Form.Check\n                  type='radio'\n                  label='All times'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios1'\n                />\n                <Form.Check\n                  type='radio'\n                  label='today'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios2'\n                />\n                <Form.Check\n                  type='radio'\n                  label='this week'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios3'\n                />\n              </Form.Group>\n            </Col>   \n          </Row> \n        </Form> */}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/components/Sidebar.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setShowTrams } from '../reducers/showTramsReducer';\nimport { setMyStop } from '../reducers/myStopReducer';\nimport { setCenter, setZoom, setShowAlert, setShowSidebar, closeSidebar, toggleAlertVariant, setAvgDuration } from '../reducers/settingsReducer';\nimport { setMyTram } from '../reducers/tramsReducer';\nimport { Container, Row, Col, Button, Dropdown, Alert } from 'react-bootstrap';\nimport distance, { sortByVehicleNumbers, sortLineNumbers, sortStopNames } from '../utils/helpers';\nimport Sound from 'react-sound';\n\nconst Sidebar = ({\n  closeSidebar,\n  tram,\n  showTrams,\n  setShowTrams,\n  setCenter,\n  setZoom,\n  stops,\n  myStop,\n  setMyStop,\n  //myTram,\n  setMyTram,\n  setShowAlert,\n  settings,\n  toggleAlertVariant,\n  setAvgDuration\n}) => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        line = _useState2[0],\n        setLine = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        alarm = _useState4[0],\n        setAlarm = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        speeds = _useState6[0],\n        setSpeeds = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        durations = _useState8[0],\n        setDurations = _useState8[1];\n\n  const style = settings.showSidebar ? {\n    width: '250px'\n  } : {\n    width: '0'\n  };\n  useEffect(() => {\n    //console.log('SIDEBAR INIT', settings.init)\n    if (alarm) {\n      let chosenTram = tram.trams.find(tram => tram.VP.veh === trams.myTram.VP.veh);\n      let distanceNow = distance(myStop.lat, myStop.lon, chosenTram.VP.lat, chosenTram.VP.long);\n      let halfWay = {\n        lat: (myStop.lat + chosenTram.VP.lat) / 2,\n        lng: (myStop.lon + chosenTram.VP.long) / 2\n      };\n      setCenter(halfWay);\n      setSpeeds(speeds.concat(chosenTram.VP.spd));\n\n      if (speeds.length > 1) {\n        let avgSpeed = speeds.reduce((previous, current) => current += previous) / speeds.length;\n        let duration = distanceNow / avgSpeed;\n        setDurations(durations.concat(duration));\n        console.log(durations);\n        let avgDuration = duration;\n        let sum = 0;\n        let counter = 0;\n\n        if (durations.length > 1) {\n          for (let i = durations.length - 1; i >= 0; i--) {\n            sum += durations[i];\n            counter++;\n\n            if (counter > 9) {\n              break;\n            }\n          }\n\n          avgDuration = sum / counter;\n        }\n\n        if (durations.length > 4 && chosenTram.VP.spd > 0) {\n          setAvgDuration(avgDuration);\n        }\n\n        console.log('DISTANCE NOW: ', distanceNow, ' m', 'AVG SPEED: ', (avgSpeed * 3.6).toFixed(2), ' km/h', chosenTram.VP.spd, ' m/s', 'ESTIMATED DURATION: ', Math.floor(avgDuration / 60), ' min', (avgDuration % 60).toFixed(0), ' sec');\n      }\n\n      if (distanceNow < 5) {\n        setAlarm(false);\n        setMyTram('');\n        setLine(0);\n        setSpeeds([]);\n        setDurations([]);\n        closeSidebar();\n        setShowAlert(true);\n      }\n\n      if (settings.showAlert) {\n        toggleAlertVariant();\n      }\n    }\n  }, [trams]);\n\n  const handleChooseMyTram = veh => {\n    console.log('TRAM CHOSEN: ', veh);\n\n    if (veh !== 'reset') {\n      let chosenTram = tram.trams.find(tram => tram.VP.veh == veh);\n      console.log('chosen Tram:', chosenTram);\n      setMyTram(chosenTram);\n      setShowTrams([]);\n      setCenter({\n        lat: chosenTram.VP.lat,\n        lng: chosenTram.VP.long\n      }); //setZoom(16)\n    } else {\n      setMyTram('');\n      setLine(0);\n    }\n  };\n\n  const handleShowLine = line => {\n    console.log('LINE CHOSEN: ', line);\n    setShowTrams(tram.trams.filter(tram => parseInt(tram.VP.desi) == line));\n    setZoom(13);\n  };\n\n  const handleChooseStop = stopsGtfsId => {\n    console.log('STOP CHOSEN: ', stopsGtfsId);\n    setMyStop(stops.find(stop => stop.gtfsId === stopsGtfsId));\n  };\n\n  let tramsInOrder = [...tram.trams];\n  tramsInOrder.sort(sortByVehicleNumbers);\n  const lineNumbers = [];\n  tram.trams.forEach(tram => {\n    if (!lineNumbers.includes(parseInt(tram.VP.desi))) {\n      lineNumbers.push(parseInt(tram.VP.desi));\n    }\n  });\n  lineNumbers.sort(sortLineNumbers);\n  const stopsInOrder = [...stops];\n  stopsInOrder.sort(sortStopNames);\n  return React.createElement(\"div\", {\n    style: style,\n    className: \"sidebar\",\n    id: \"mySidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, !myStop ? 'CHOOSE STOP' : myStop.name + ' ' + myStop.gtfsId), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, stopsInOrder.map((stop, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleChooseStop(stop.gtfsId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, stop.name, \" \", stop.gtfsId)))))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(Dropdown\n  /* id='tramDropdown' */\n  , {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, line > 0 ? 'Line: ' + line : 'Line?'), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, tram.myTram.VP && React.createElement(Dropdown.Item, {\n    onClick: () => handleChooseMyTram('reset'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"reset\"), lineNumbers.map((line, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => setLine(line),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, line)))))), line > 0 && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    xs: 12\n    /* id='tramDropdown' */\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, tram.myTram.VP ? 'Vehicle: ' + tram.myTram.VP.veh : 'Vehicle?'), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, tram.myTram.VP && React.createElement(Dropdown.Item, {\n    onClick: () => handleChooseMyTram('reset'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"reset\"), tramsInOrder.filter(tram => tram.VP.desi == line).map((tram, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleChooseMyTram(tram.VP.veh),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, tram.VP.veh)))))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, tram.myTram.VP && myStop && React.createElement(Col, {\n    xs: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, \"Distance:\", ' ', distance(myStop.lat, myStop.lon, tram.trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat, tram.trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long), ' m', \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }), settings.avgDuration > 0 && 'Duration:' + settings.avgDuration.toFixed(0) + ' sec')), tram.trams.length !== showTrams.length && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => {\n      setShowTrams(tram.trams); //setZoom(13)\n      //closeSidebar()\n    },\n    variant: \"success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \"show all trams\"))), (myTram.VP || showTrams.length > 0) && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setShowTrams([]),\n    variant: \"success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, \"hide all trams\"))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, React.createElement(Dropdown\n  /* id='tramDropdown' */\n  , {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, \"Show Line\"), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, lineNumbers.map((line, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleShowLine(line),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, line)))))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, myTram.VP && React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setAlarm(!alarm),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, !alarm ? 'Set alarm' : 'Alarm off')))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    trams: state.trams,\n    showTrams: state.showTrams,\n    showSidebar: state.showSidebar,\n    stops: state.stops,\n    myStop: state.myStop,\n    myTram: state.myTram,\n    settings: state.settings\n  };\n};\n\nconst mapDispatchToProps = {\n  setShowTrams,\n  setMyStop,\n  setCenter,\n  setZoom,\n  setMyTram,\n  setShowAlert,\n  closeSidebar,\n  toggleAlertVariant,\n  setAvgDuration\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\n{\n  /* \n        <Form>\n          <Row>\n            <Col xs='auto'>\n              <Form.Group controlId='exampleForm.ControlSelect3'>\n                <Form.Label>My stop</Form.Label>\n                <Form.Control\n                  as='select'\n                  onChange={handleChooseStop}\n                  value={myStop.gtfsId}\n                >\n                  <option> - </option>\n                  {stopsInOrder.map((stop, i) => (\n                    <option key={i} value={stop.gtfsId}>\n                      {stop.name} {stop.gtfsId}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group controlId='exampleForm.ControlSelect1'>\n                <Form.Label>Choose tram</Form.Label>\n                <Form.Control as='select' onChange={handleChooseMyTram}>\n                  {!myTram.VP ? (\n                    <option> - </option>\n                  ) : (\n                    <option value='reset'>reset</option>\n                  )}\n                  {tramsInOrder.map((tram, i) => (\n                    <option key={i} value={tram.VP.veh}>\n                      line: {tram.VP.desi} veh:{tram.VP.veh}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n             <Row>\n            <Col sm={5}>\n              <Form.Group>\n                <Form.Check\n                  type='radio'\n                  label='All times'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios1'\n                />\n                <Form.Check\n                  type='radio'\n                  label='today'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios2'\n                />\n                <Form.Check\n                  type='radio'\n                  label='this week'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios3'\n                />\n              </Form.Group>\n            </Col>   \n          </Row> \n          <Row>\n          <Col>\n            <Form.Group controlId='exampleForm.ControlSelect2'>\n              <Form.Label>Show line</Form.Label>\n              <Form.Control as='select' onChange={handleShowLine}>\n                <option> - </option>\n                {lineNumbers.map((line, i) => (\n                  <option key={i} value={line}>\n                    {line}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Col>\n        </Row> \n        </Form> */\n}","map":{"version":3,"sources":["/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/components/Sidebar.js"],"names":["React","useState","useEffect","connect","setShowTrams","setMyStop","setCenter","setZoom","setShowAlert","setShowSidebar","closeSidebar","toggleAlertVariant","setAvgDuration","setMyTram","Container","Row","Col","Button","Dropdown","Alert","distance","sortByVehicleNumbers","sortLineNumbers","sortStopNames","Sound","Sidebar","tram","showTrams","stops","myStop","settings","line","setLine","alarm","setAlarm","speeds","setSpeeds","durations","setDurations","style","showSidebar","width","chosenTram","trams","find","VP","veh","myTram","distanceNow","lat","lon","long","halfWay","lng","concat","spd","length","avgSpeed","reduce","previous","current","duration","console","log","avgDuration","sum","counter","i","toFixed","Math","floor","showAlert","handleChooseMyTram","handleShowLine","filter","parseInt","desi","handleChooseStop","stopsGtfsId","stop","gtfsId","tramsInOrder","sort","lineNumbers","forEach","includes","push","stopsInOrder","name","map","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { setShowTrams } from '../reducers/showTramsReducer'\nimport { setMyStop } from '../reducers/myStopReducer'\nimport { setCenter, setZoom, setShowAlert, setShowSidebar, closeSidebar, toggleAlertVariant, setAvgDuration } from '../reducers/settingsReducer'\nimport { setMyTram } from '../reducers/tramsReducer'\nimport { Container, Row, Col, Button, Dropdown, Alert } from 'react-bootstrap'\nimport distance, {\n  sortByVehicleNumbers,\n  sortLineNumbers,\n  sortStopNames,\n} from '../utils/helpers'\nimport Sound from 'react-sound' \n\nconst Sidebar = ({\n  closeSidebar,\n  tram,\n  showTrams,\n  setShowTrams,\n  setCenter,\n  setZoom,\n  stops,\n  myStop,\n  setMyStop,\n  //myTram,\n  setMyTram,\n  setShowAlert,\n  settings, \n  toggleAlertVariant,\n  setAvgDuration,\n}) => {\n  const [line, setLine] = useState(0)\n  const [alarm, setAlarm] = useState(false)\n  const [speeds, setSpeeds] = useState([])\n  const [durations, setDurations] = useState([])\n\n  const style = settings.showSidebar ? { width: '250px' } : { width: '0' }\n\n  useEffect(() => {\n    //console.log('SIDEBAR INIT', settings.init)\n    if (alarm) { \n      let chosenTram = tram.trams.find(tram => tram.VP.veh === trams.myTram.VP.veh)\n      let distanceNow = distance(\n        myStop.lat,\n        myStop.lon,\n        chosenTram.VP.lat,\n        chosenTram.VP.long\n      )\n      let halfWay = {\n        lat: (myStop.lat + chosenTram.VP.lat) / 2,\n        lng: (myStop.lon + chosenTram.VP.long) / 2\n      }\n      setCenter(halfWay)\n      setSpeeds(speeds.concat(chosenTram.VP.spd))\n      if (speeds.length > 1) {\n        let avgSpeed =\n          speeds.reduce((previous, current) => (current += previous)) /\n          speeds.length\n        let duration = distanceNow / avgSpeed\n        setDurations(durations.concat(duration))\n        console.log(durations)\n        let avgDuration = duration\n        let sum = 0; let counter = 0\n        if(durations.length > 1){\n          for(let i=durations.length -1;i>=0;i--){\n            sum+=durations[i]\n            counter++\n            if(counter > 9){\n              break\n            }\n          }\n          avgDuration = sum/counter\n        }\n        if(durations.length > 4 && chosenTram.VP.spd > 0){\n          setAvgDuration(avgDuration)\n        } \n\n        console.log(\n          'DISTANCE NOW: ',\n          distanceNow,\n          ' m',\n          'AVG SPEED: ',\n          (avgSpeed * 3.6).toFixed(2),\n          ' km/h',\n          chosenTram.VP.spd,\n          ' m/s',\n          'ESTIMATED DURATION: ',\n          Math.floor(avgDuration / 60),\n          ' min',\n          (avgDuration % 60).toFixed(0),\n          ' sec'\n        )\n      }\n      if (distanceNow < 5) {\n        setAlarm(false)\n        setMyTram('') \n        setLine(0)\n        setSpeeds([])\n        setDurations([])\n        closeSidebar() \n        setShowAlert(true)\n      }\n      if(settings.showAlert){\n        toggleAlertVariant()\n      }\n    }\n  }, [trams])\n\n  const handleChooseMyTram = veh => {\n    console.log('TRAM CHOSEN: ', veh)\n    if (veh !== 'reset') {\n      let chosenTram = tram.trams.find(tram => tram.VP.veh == veh)\n      console.log('chosen Tram:', chosenTram)\n      setMyTram(chosenTram)\n      setShowTrams([])\n      setCenter({ lat: chosenTram.VP.lat, lng: chosenTram.VP.long })\n      //setZoom(16)\n    } else {\n      setMyTram('')\n      setLine(0)\n    }\n  }\n\n  const handleShowLine = line => {\n    console.log('LINE CHOSEN: ', line)\n    setShowTrams(tram.trams.filter(tram => parseInt(tram.VP.desi) == line))\n    setZoom(13)\n  }\n\n  const handleChooseStop = stopsGtfsId => {\n    console.log('STOP CHOSEN: ', stopsGtfsId)\n    setMyStop(stops.find(stop => stop.gtfsId === stopsGtfsId))\n  }\n\n  let tramsInOrder = [...tram.trams]\n  tramsInOrder.sort(sortByVehicleNumbers)\n\n  const lineNumbers = []\n  tram.trams.forEach(tram => {\n    if (!lineNumbers.includes(parseInt(tram.VP.desi))) {\n      lineNumbers.push(parseInt(tram.VP.desi))\n    }\n  })\n  lineNumbers.sort(sortLineNumbers)\n\n  const stopsInOrder = [...stops]\n  stopsInOrder.sort(sortStopNames)\n\n  return (\n    <div style={style} className='sidebar' id='mySidebar'>\n\n      <Container>\n        {/* <Sound\n      url='https://actions.google.com/sounds/v1/alarms/beep_short.ogg'\n      playStatus={Sound.status.PLAYING}\n      playFromPosition={300}\n      volume={90}\n      onLoading={this.handleSongLoading}\n      onPlaying={this.handleSongPlaying}\n      onFinishedPlaying={this.handleSongFinishedPlaying}\n    />   */}\n        <Row>\n          <Col xs={12}>\n            <Dropdown>\n              <Dropdown.Toggle variant='success' id='dropdown-basic'>\n                {!myStop ? 'CHOOSE STOP' : myStop.name + ' ' + myStop.gtfsId}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {stopsInOrder.map((stop, i) => (\n                  <Dropdown.Item\n                    key={i}\n                    onClick={() => handleChooseStop(stop.gtfsId)}\n                  >\n                    {stop.name} {stop.gtfsId}\n                  </Dropdown.Item>\n                ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12}>\n            <Dropdown /* id='tramDropdown' */>\n              <Dropdown.Toggle variant='success' id='dropdown-basic'>\n                {line > 0 ? 'Line: ' + line : 'Line?'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n              {tram.myTram.VP && \n                  <Dropdown.Item onClick={() => handleChooseMyTram('reset')}>\n                    reset\n                  </Dropdown.Item>}\n                {lineNumbers.map((line, i) => (\n                  <Dropdown.Item key={i} onClick={() => setLine(line)}>\n                    {line}\n                  </Dropdown.Item>\n                ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n          </Row>\n\n          {line > 0 && <Row>\n          <Col xs={12}>\n            <Dropdown xs={12}/* id='tramDropdown' */>\n              <Dropdown.Toggle variant='success' id='dropdown-basic'>\n                {tram.myTram.VP ? 'Vehicle: ' + tram.myTram.VP.veh : 'Vehicle?'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {tram.myTram.VP && \n                  <Dropdown.Item onClick={() => handleChooseMyTram('reset')}>\n                    reset\n                  </Dropdown.Item>}\n                {tramsInOrder\n                  .filter(tram => tram.VP.desi == line)\n                  .map((tram, i) => (\n                    <Dropdown.Item\n                      key={i}\n                      onClick={() => handleChooseMyTram(tram.VP.veh)}\n                    >\n                      {tram.VP.veh}\n                    </Dropdown.Item>\n                  ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n        </Row>}\n\n        <Row>\n          {tram.myTram.VP && myStop && (\n            <Col xs='auto'>\n              Distance:{' '}\n              {distance(\n                myStop.lat,\n                myStop.lon,\n                tram.trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat,\n                tram.trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long\n              )}{' m'} <br/>\n              {settings.avgDuration > 0 && 'Duration:' + settings.avgDuration.toFixed(0)+ ' sec'}\n            </Col>\n          )}\n        </Row>\n\n        {(tram.trams.length !== showTrams.length) && <Row>\n          <Col>\n            <Button\n              onClick={() => {\n                setShowTrams(tram.trams)\n                //setZoom(13)\n                //closeSidebar()\n              }}\n              variant='success'\n            >\n              show all trams\n            </Button>\n          </Col>\n        </Row>}\n\n        {(myTram.VP || showTrams.length > 0) && <Row>\n          <Col>\n            <Button onClick={() => setShowTrams([])} variant='success'>\n              hide all trams\n            </Button>\n          </Col>\n        </Row>}\n\n        <Row>\n          <Col>\n            <Dropdown /* id='tramDropdown' */>\n              <Dropdown.Toggle variant='success' id='dropdown-basic'>\n                Show Line\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {lineNumbers.map((line, i) => (\n                  <Dropdown.Item key={i} onClick={() => handleShowLine(line)}>\n                    {line}\n                  </Dropdown.Item>\n                ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n        </Row>\n        <Row>\n          {myTram.VP && (\n            <Col>\n              <Button onClick={() => setAlarm(!alarm)}>\n                {!alarm ? 'Set alarm' : 'Alarm off'}\n              </Button>\n            </Col>\n          )}\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    trams: state.trams,\n    showTrams: state.showTrams,\n    showSidebar: state.showSidebar,\n    stops: state.stops,\n    myStop: state.myStop,\n    myTram: state.myTram,\n    settings: state.settings,\n  }\n}\n\nconst mapDispatchToProps = { \n  setShowTrams,\n  setMyStop,\n  setCenter,\n  setZoom,\n  setMyTram,\n  setShowAlert,\n  closeSidebar,\n  toggleAlertVariant, \n  setAvgDuration,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Sidebar)\n\n{\n  /* \n        <Form>\n          <Row>\n            <Col xs='auto'>\n              <Form.Group controlId='exampleForm.ControlSelect3'>\n                <Form.Label>My stop</Form.Label>\n                <Form.Control\n                  as='select'\n                  onChange={handleChooseStop}\n                  value={myStop.gtfsId}\n                >\n                  <option> - </option>\n                  {stopsInOrder.map((stop, i) => (\n                    <option key={i} value={stop.gtfsId}>\n                      {stop.name} {stop.gtfsId}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group controlId='exampleForm.ControlSelect1'>\n                <Form.Label>Choose tram</Form.Label>\n                <Form.Control as='select' onChange={handleChooseMyTram}>\n                  {!myTram.VP ? (\n                    <option> - </option>\n                  ) : (\n                    <option value='reset'>reset</option>\n                  )}\n                  {tramsInOrder.map((tram, i) => (\n                    <option key={i} value={tram.VP.veh}>\n                      line: {tram.VP.desi} veh:{tram.VP.veh}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n \n           <Row>\n            <Col sm={5}>\n              <Form.Group>\n                <Form.Check\n                  type='radio'\n                  label='All times'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios1'\n                />\n                <Form.Check\n                  type='radio'\n                  label='today'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios2'\n                />\n                <Form.Check\n                  type='radio'\n                  label='this week'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios3'\n                />\n              </Form.Group>\n            </Col>   \n          </Row> \n          <Row>\n          <Col>\n            <Form.Group controlId='exampleForm.ControlSelect2'>\n              <Form.Label>Show line</Form.Label>\n              <Form.Control as='select' onChange={handleShowLine}>\n                <option> - </option>\n                {lineNumbers.map((line, i) => (\n                  <option key={i} value={line}>\n                    {line}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Col>\n        </Row> \n        </Form> */\n}\n"]},"metadata":{},"sourceType":"module"}
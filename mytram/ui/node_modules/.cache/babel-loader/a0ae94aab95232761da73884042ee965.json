{"ast":null,"code":"const distance = (lat1, lon1, lat2, lon2) => {\n  var R = 6371; // km (change this constant to get miles)\n\n  var dLat = (lat2 - lat1) * Math.PI / 180;\n  var dLon = (lon2 - lon1) * Math.PI / 180;\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  /* if (d>1) return d.toFixed(2) +\"km\";\n  else if (d<=1) return Math.round(d*1000)+\"m\"; */\n\n  return d;\n};\n\nexport const sortByLineNumbers = (a, b) => {\n  return parseInt(a.VP.desi) < parseInt(b.VP.desi) ? -1 : parseInt(a.VP.desi) > parseInt(b.VP.desi) ? 1 : 0;\n};\nexport default distance;","map":{"version":3,"sources":["/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/utils/helpers.js"],"names":["distance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","d","sortByLineNumbers","b","parseInt","VP","desi"],"mappings":"AACA,MAAMA,QAAQ,GAAG,CAACC,IAAD,EAAMC,IAAN,EAAWC,IAAX,EAAgBC,IAAhB,KAAyB;AACzC,MAAIC,CAAC,GAAG,IAAR,CADyC,CAC3B;;AACd,MAAIC,IAAI,GAAG,CAACH,IAAI,GAACF,IAAN,IAAcM,IAAI,CAACC,EAAnB,GAAwB,GAAnC;AACA,MAAIC,IAAI,GAAG,CAACL,IAAI,GAACF,IAAN,IAAcK,IAAI,CAACC,EAAnB,GAAwB,GAAnC;AACA,MAAIE,CAAC,GAAGH,IAAI,CAACI,GAAL,CAASL,IAAI,GAAC,CAAd,IAAmBC,IAAI,CAACI,GAAL,CAASL,IAAI,GAAC,CAAd,CAAnB,GACPC,IAAI,CAACK,GAAL,CAASX,IAAI,GAAGM,IAAI,CAACC,EAAZ,GAAiB,GAA1B,IAAkCD,IAAI,CAACK,GAAL,CAAST,IAAI,GAAGI,IAAI,CAACC,EAAZ,GAAiB,GAA1B,CAAlC,GACAD,IAAI,CAACI,GAAL,CAASF,IAAI,GAAC,CAAd,CADA,GACmBF,IAAI,CAACI,GAAL,CAASF,IAAI,GAAC,CAAd,CAFpB;AAGA,MAAII,CAAC,GAAG,IAAIN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,IAAL,CAAUL,CAAV,CAAX,EAAyBH,IAAI,CAACQ,IAAL,CAAU,IAAEL,CAAZ,CAAzB,CAAZ;AACA,MAAIM,CAAC,GAAGX,CAAC,GAAGQ,CAAZ;AACA;;;AAEA,SAAOG,CAAP;AACA,CAZD;;AAcA,OAAO,MAAMC,iBAAiB,GAAG,CAACP,CAAD,EAAIQ,CAAJ,KAAU;AACvC,SAAOC,QAAQ,CAACT,CAAC,CAACU,EAAF,CAAKC,IAAN,CAAR,GAAsBF,QAAQ,CAACD,CAAC,CAACE,EAAF,CAAKC,IAAN,CAA9B,GACH,CAAC,CADE,GAEHF,QAAQ,CAACT,CAAC,CAACU,EAAF,CAAKC,IAAN,CAAR,GAAsBF,QAAQ,CAACD,CAAC,CAACE,EAAF,CAAKC,IAAN,CAA9B,GACE,CADF,GAEE,CAJN;AAKD,CANI;AASP,eAAerB,QAAf","sourcesContent":["\nconst distance = (lat1,lon1,lat2,lon2) => {\n\tvar R = 6371; // km (change this constant to get miles)\n\tvar dLat = (lat2-lat1) * Math.PI / 180;\n\tvar dLon = (lon2-lon1) * Math.PI / 180;\n\tvar a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n\t\tMath.cos(lat1 * Math.PI / 180 ) * Math.cos(lat2 * Math.PI / 180 ) *\n\t\tMath.sin(dLon/2) * Math.sin(dLon/2);\n\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\tvar d = R * c;\n\t/* if (d>1) return d.toFixed(2) +\"km\";\n\telse if (d<=1) return Math.round(d*1000)+\"m\"; */\n\treturn d;\n}\n \nexport const sortByLineNumbers = (a, b) => {\n    return parseInt(a.VP.desi) < parseInt(b.VP.desi)\n      ? -1\n      : parseInt(a.VP.desi) > parseInt(b.VP.desi)\n        ? 1\n        : 0\n  }\n  \n\nexport default distance"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/components/Sidebar.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { setShowTrams } from '../reducers/showTramsReducer';\nimport { setMyStop } from '../reducers/myStopReducer';\nimport { setCenter } from '../reducers/centerReducer';\nimport { setZoom } from '../reducers/zoomReducer';\nimport { setMyTram } from '../reducers/myTramReducer';\nimport { Container, Row, Col, Form, Button, Dropdown } from 'react-bootstrap';\nimport distance, { sortByVehicleNumbers, sortLineNumbers, sortStopNames } from '../utils/helpers';\nimport { get } from 'https';\n\nconst Sidebar = ({\n  closeSidebar,\n  showSidebar,\n  trams,\n  //showTrams,\n  setShowTrams,\n  setCenter,\n  setZoom,\n  stops,\n  myStop,\n  setMyStop,\n  myTram,\n  setMyTram\n}) => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        line = _useState2[0],\n        setLine = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        alarm = _useState4[0],\n        setAlarm = _useState4[1];\n\n  const style = showSidebar ? {\n    width: '250px'\n  } : {\n    width: '0'\n  };\n\n  const handleChooseMyTram = veh => {\n    console.log('TRAM CHOSEN: ', veh);\n\n    if (veh !== 'reset') {\n      let chosenTram = trams.find(tram => tram.VP.veh == veh);\n      console.log('chosen Tram:', chosenTram);\n      setMyTram(chosenTram);\n      setShowTrams([]);\n      setCenter({\n        lat: chosenTram.VP.lat,\n        lng: chosenTram.VP.long\n      }); //setZoom(16)\n    } else {\n      setMyTram('');\n      setLine(0);\n    }\n  };\n\n  const handleShowLine = line => {\n    console.log('LINE CHOSEN: ', line);\n    setShowTrams(trams.filter(tram => parseInt(tram.VP.desi) == line));\n    setZoom(13);\n  };\n\n  const handleChooseStop = stopsGtfsId => {\n    console.log('STOP CHOSEN: ', stopsGtfsId);\n    setMyStop(stops.find(stop => stop.gtfsId === stopsGtfsId));\n  };\n  /* const getTrams = () => {\n    return [...trams]\n  } */\n\n  /* const handleSetAlarm = () => {\n    console.log('ALARM SET')\n    setInterval(()=> {\n        let upDatedTrams = getTrams()\n        console.log('DISTANCE NOW: ', distance(\n          myStop.lat,\n          myStop.lon,\n          upDatedTrams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat,\n          upDatedTrams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long\n        ), new Date())\n    }, 1000)\n  } */\n\n\n  let tramsInOrder = [...trams];\n  tramsInOrder.sort(sortByVehicleNumbers);\n  const lineNumbers = [];\n  trams.forEach(tram => {\n    if (!lineNumbers.includes(parseInt(tram.VP.desi))) {\n      lineNumbers.push(parseInt(tram.VP.desi));\n    }\n  });\n  lineNumbers.sort(sortLineNumbers);\n  const stopsInOrder = [...stops];\n  stopsInOrder.sort(sortStopNames);\n  return React.createElement(\"div\", {\n    style: style,\n    className: \"sidebar\",\n    id: \"mySidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, !myStop ? 'CHOOSE STOP' : myStop.name + ' ' + myStop.gtfsId), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, stopsInOrder.map((stop, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleChooseStop(stop.gtfsId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, stop.name, \" \", stop.gtfsId)))))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Dropdown\n  /* id='tramDropdown' */\n  , {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, line > 0 ? 'Line: ' + line : 'Line?'), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, lineNumbers.map((line, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => setLine(line),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, line))))), React.createElement(Col, {\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(Dropdown\n  /* id='tramDropdown' */\n  , {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, myTram.VP ? 'Vehicle: ' + myTram.VP.veh : 'Vehicle?'), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, myTram.VP ? React.createElement(Dropdown.Item, {\n    onClick: () => handleChooseMyTram('reset'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"reset\") : React.createElement(Dropdown.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"choose line\"), tramsInOrder.filter(tram => tram.VP.desi == line).map((tram, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleChooseMyTram(tram.VP.veh),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, tram.VP.veh)))))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, myTram.VP && myStop && React.createElement(Col, {\n    xs: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Distance:\", ' ', distance(myStop.lat, myStop.lon, trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat, trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long), ' ', \"m\")), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => {\n      setShowTrams(trams);\n      setZoom(13);\n      closeSidebar();\n    },\n    variant: \"success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \"show all trams\"))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setShowTrams([]),\n    variant: \"success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"hide all trams\"))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(Dropdown\n  /* id='tramDropdown' */\n  , {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"dropdown-basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"Show Line\"), React.createElement(Dropdown.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, lineNumbers.map((line, i) => React.createElement(Dropdown.Item, {\n    key: i,\n    onClick: () => handleShowLine(line),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, line)))))), myTram.VP && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setAlarm(!alarm),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, !alarm ? 'Set alarm' : 'Alarm off'))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    trams: state.trams,\n    //showTrams: state.showTrams,\n    showSidebar: state.showSidebar,\n    stops: state.stops,\n    myStop: state.myStop,\n    myTram: state.myTram\n  };\n};\n\nconst mapDispatchToProps = {\n  setShowTrams,\n  setMyStop,\n  setCenter,\n  setZoom,\n  setMyTram\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\n{\n  /* \n        <Form>\n          <Row>\n            <Col xs='auto'>\n              <Form.Group controlId='exampleForm.ControlSelect3'>\n                <Form.Label>My stop</Form.Label>\n                <Form.Control\n                  as='select'\n                  onChange={handleChooseStop}\n                  value={myStop.gtfsId}\n                >\n                  <option> - </option>\n                  {stopsInOrder.map((stop, i) => (\n                    <option key={i} value={stop.gtfsId}>\n                      {stop.name} {stop.gtfsId}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group controlId='exampleForm.ControlSelect1'>\n                <Form.Label>Choose tram</Form.Label>\n                <Form.Control as='select' onChange={handleChooseMyTram}>\n                  {!myTram.VP ? (\n                    <option> - </option>\n                  ) : (\n                    <option value='reset'>reset</option>\n                  )}\n                  {tramsInOrder.map((tram, i) => (\n                    <option key={i} value={tram.VP.veh}>\n                      line: {tram.VP.desi} veh:{tram.VP.veh}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n             <Row>\n            <Col sm={5}>\n              <Form.Group>\n                <Form.Check\n                  type='radio'\n                  label='All times'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios1'\n                />\n                <Form.Check\n                  type='radio'\n                  label='today'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios2'\n                />\n                <Form.Check\n                  type='radio'\n                  label='this week'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios3'\n                />\n              </Form.Group>\n            </Col>   \n          </Row> \n          <Row>\n          <Col>\n            <Form.Group controlId='exampleForm.ControlSelect2'>\n              <Form.Label>Show line</Form.Label>\n              <Form.Control as='select' onChange={handleShowLine}>\n                <option> - </option>\n                {lineNumbers.map((line, i) => (\n                  <option key={i} value={line}>\n                    {line}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Col>\n        </Row> \n        </Form> */\n}","map":{"version":3,"sources":["/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/components/Sidebar.js"],"names":["React","useState","connect","setShowTrams","setMyStop","setCenter","setZoom","setMyTram","Container","Row","Col","Form","Button","Dropdown","distance","sortByVehicleNumbers","sortLineNumbers","sortStopNames","get","Sidebar","closeSidebar","showSidebar","trams","stops","myStop","myTram","line","setLine","alarm","setAlarm","style","width","handleChooseMyTram","veh","console","log","chosenTram","find","tram","VP","lat","lng","long","handleShowLine","filter","parseInt","desi","handleChooseStop","stopsGtfsId","stop","gtfsId","tramsInOrder","sort","lineNumbers","forEach","includes","push","stopsInOrder","name","map","i","lon","mapStateToProps","state","mapDispatchToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4CC,QAA5C,QAA4D,iBAA5D;AACA,OAAOC,QAAP,IACEC,oBADF,EAEEC,eAFF,EAGEC,aAHF,QAIO,kBAJP;AAKA,SAASC,GAAT,QAAoB,OAApB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AACfC,EAAAA,YADe;AAEfC,EAAAA,WAFe;AAGfC,EAAAA,KAHe;AAIf;AACAnB,EAAAA,YALe;AAMfE,EAAAA,SANe;AAOfC,EAAAA,OAPe;AAQfiB,EAAAA,KARe;AASfC,EAAAA,MATe;AAUfpB,EAAAA,SAVe;AAWfqB,EAAAA,MAXe;AAYflB,EAAAA;AAZe,CAAD,KAaV;AAAA,oBACoBN,QAAQ,CAAC,CAAD,CAD5B;AAAA;AAAA,QACGyB,IADH;AAAA,QACSC,OADT;;AAAA,qBAEsB1B,QAAQ,CAAC,KAAD,CAF9B;AAAA;AAAA,QAEG2B,KAFH;AAAA,QAEUC,QAFV;;AAIJ,QAAMC,KAAK,GAAGT,WAAW,GAAG;AAAEU,IAAAA,KAAK,EAAE;AAAT,GAAH,GAAwB;AAAEA,IAAAA,KAAK,EAAE;AAAT,GAAjD;;AAIA,QAAMC,kBAAkB,GAAGC,GAAG,IAAI;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,GAA7B;;AACA,QAAIA,GAAG,KAAK,OAAZ,EAAqB;AACnB,UAAIG,UAAU,GAAGd,KAAK,CAACe,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,EAAL,CAAQN,GAAR,IAAeA,GAAlC,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,UAA5B;AACA7B,MAAAA,SAAS,CAAC6B,UAAD,CAAT;AACAjC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,MAAAA,SAAS,CAAC;AAAEmC,QAAAA,GAAG,EAAEJ,UAAU,CAACG,EAAX,CAAcC,GAArB;AAA0BC,QAAAA,GAAG,EAAEL,UAAU,CAACG,EAAX,CAAcG;AAA7C,OAAD,CAAT,CALmB,CAMnB;AACD,KAPD,MAOO;AACLnC,MAAAA,SAAS,CAAC,EAAD,CAAT;AACAoB,MAAAA,OAAO,CAAC,CAAD,CAAP;AACD;AACF,GAbD;;AAeA,QAAMgB,cAAc,GAAGjB,IAAI,IAAI;AAC7BQ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,IAA7B;AACAvB,IAAAA,YAAY,CAACmB,KAAK,CAACsB,MAAN,CAAaN,IAAI,IAAIO,QAAQ,CAACP,IAAI,CAACC,EAAL,CAAQO,IAAT,CAAR,IAA0BpB,IAA/C,CAAD,CAAZ;AACApB,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAJD;;AAMA,QAAMyC,gBAAgB,GAAGC,WAAW,IAAI;AACtCd,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Ba,WAA7B;AACA5C,IAAAA,SAAS,CAACmB,KAAK,CAACc,IAAN,CAAWY,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBF,WAAnC,CAAD,CAAT;AACD,GAHD;AAID;;;;AAIC;;;;;;;;;;;;;;AAaA,MAAIG,YAAY,GAAG,CAAC,GAAG7B,KAAJ,CAAnB;AACA6B,EAAAA,YAAY,CAACC,IAAb,CAAkBrC,oBAAlB;AAEA,QAAMsC,WAAW,GAAG,EAApB;AACA/B,EAAAA,KAAK,CAACgC,OAAN,CAAchB,IAAI,IAAI;AACpB,QAAI,CAACe,WAAW,CAACE,QAAZ,CAAqBV,QAAQ,CAACP,IAAI,CAACC,EAAL,CAAQO,IAAT,CAA7B,CAAL,EAAmD;AACjDO,MAAAA,WAAW,CAACG,IAAZ,CAAiBX,QAAQ,CAACP,IAAI,CAACC,EAAL,CAAQO,IAAT,CAAzB;AACD;AACF,GAJD;AAKAO,EAAAA,WAAW,CAACD,IAAZ,CAAiBpC,eAAjB;AAEA,QAAMyC,YAAY,GAAG,CAAC,GAAGlC,KAAJ,CAArB;AACAkC,EAAAA,YAAY,CAACL,IAAb,CAAkBnC,aAAlB;AAEA,SACE;AAAK,IAAA,KAAK,EAAEa,KAAZ;AAAmB,IAAA,SAAS,EAAC,SAA7B;AAAuC,IAAA,EAAE,EAAC,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD,CAAU,MAAV;AAAiB,IAAA,OAAO,EAAC,SAAzB;AAAmC,IAAA,EAAE,EAAC,gBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACN,MAAD,GAAU,aAAV,GAA0BA,MAAM,CAACkC,IAAP,GAAc,GAAd,GAAoBlC,MAAM,CAAC0B,MADxD,CADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,YAAY,CAACE,GAAb,CAAiB,CAACV,IAAD,EAAOW,CAAP,KAChB,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,GAAG,EAAEA,CADP;AAEE,IAAA,OAAO,EAAE,MAAMb,gBAAgB,CAACE,IAAI,CAACC,MAAN,CAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGD,IAAI,CAACS,IAJR,OAIeT,IAAI,CAACC,MAJpB,CADD,CADH,CAJF,CADF,CADF,CADF,EAqBE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC;AAAS;AAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD,CAAU,MAAV;AAAiB,IAAA,OAAO,EAAC,SAAzB;AAAmC,IAAA,EAAE,EAAC,gBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,IAAI,GAAG,CAAP,GAAW,WAAWA,IAAtB,GAA6B,OADhC,CADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG2B,WAAW,CAACM,GAAZ,CAAgB,CAACjC,IAAD,EAAOkC,CAAP,KACf,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,GAAG,EAAEA,CAApB;AAAuB,IAAA,OAAO,EAAE,MAAMjC,OAAO,CAACD,IAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CADD,CADH,CAJF,CADF,CADF,EAeE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC;AAAS;AAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD,CAAU,MAAV;AAAiB,IAAA,OAAO,EAAC,SAAzB;AAAmC,IAAA,EAAE,EAAC,gBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,MAAM,CAACc,EAAP,GAAY,cAAcd,MAAM,CAACc,EAAP,CAAUN,GAApC,GAA0C,UAD7C,CADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,MAAM,CAACc,EAAP,GACC,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,OAAO,EAAE,MAAMP,kBAAkB,CAAC,OAAD,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADD,GAIG,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALN,EASGmB,YAAY,CACVP,MADF,CACSN,IAAI,IAAIA,IAAI,CAACC,EAAL,CAAQO,IAAR,IAAgBpB,IADjC,EAEEiC,GAFF,CAEM,CAACrB,IAAD,EAAOsB,CAAP,KACH,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,GAAG,EAAEA,CADP;AAEE,IAAA,OAAO,EAAE,MAAM5B,kBAAkB,CAACM,IAAI,CAACC,EAAL,CAAQN,GAAT,CAFnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGK,IAAI,CAACC,EAAL,CAAQN,GAJX,CAHH,CATH,CAJF,CADF,CAfF,CArBF,EAiEE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,MAAM,CAACc,EAAP,IAAaf,MAAb,IACC,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACY,GADZ,EAEGV,QAAQ,CACPU,MAAM,CAACgB,GADA,EAEPhB,MAAM,CAACqC,GAFA,EAGPvC,KAAK,CAACe,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,EAAL,CAAQN,GAAR,KAAgBR,MAAM,CAACc,EAAP,CAAUN,GAA7C,EAAkDM,EAAlD,CAAqDC,GAH9C,EAIPlB,KAAK,CAACe,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,EAAL,CAAQN,GAAR,KAAgBR,MAAM,CAACc,EAAP,CAAUN,GAA7C,EAAkDM,EAAlD,CAAqDG,IAJ9C,CAFX,EAOK,GAPL,MAFJ,CAjEF,EAgFE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE,MAAM;AACbvC,MAAAA,YAAY,CAACmB,KAAD,CAAZ;AACAhB,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAc,MAAAA,YAAY;AACb,KALH;AAME,IAAA,OAAO,EAAC,SANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,CAhFF,EA8FE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE,MAAMjB,YAAY,CAAC,EAAD,CAD7B;AAEE,IAAA,OAAO,EAAC,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,CA9FF,EAyGE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC;AAAS;AAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD,CAAU,MAAV;AAAiB,IAAA,OAAO,EAAC,SAAzB;AAAmC,IAAA,EAAE,EAAC,gBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGkD,WAAW,CAACM,GAAZ,CAAgB,CAACjC,IAAD,EAAOkC,CAAP,KACf,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,GAAG,EAAEA,CAApB;AAAuB,IAAA,OAAO,EAAE,MAAMjB,cAAc,CAACjB,IAAD,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CADD,CADH,CAJF,CADF,CADF,CAzGF,EAyHGD,MAAM,CAACc,EAAP,IAAa,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACZ,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAIV,QAAQ,CAAC,CAACD,KAAF,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwC,CAACA,KAAD,GAAS,WAAT,GAAuB,WAA/D,CADY,CAzHhB,CADF,CADF;AAiID,CA9MD;;AAgNA,MAAMkC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLzC,IAAAA,KAAK,EAAEyC,KAAK,CAACzC,KADR;AAEL;AACAD,IAAAA,WAAW,EAAE0C,KAAK,CAAC1C,WAHd;AAILE,IAAAA,KAAK,EAAEwC,KAAK,CAACxC,KAJR;AAKLC,IAAAA,MAAM,EAAEuC,KAAK,CAACvC,MALT;AAMLC,IAAAA,MAAM,EAAEsC,KAAK,CAACtC;AANT,GAAP;AAQD,CATD;;AAWA,MAAMuC,kBAAkB,GAAG;AACzB7D,EAAAA,YADyB;AAEzBC,EAAAA,SAFyB;AAGzBC,EAAAA,SAHyB;AAIzBC,EAAAA,OAJyB;AAKzBC,EAAAA;AALyB,CAA3B;AAQA,eAAeL,OAAO,CACpB4D,eADoB,EAEpBE,kBAFoB,CAAP,CAGb7C,OAHa,CAAf;AAKA;AACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFD","sourcesContent":["import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { setShowTrams } from '../reducers/showTramsReducer'\nimport { setMyStop } from '../reducers/myStopReducer'\nimport { setCenter } from '../reducers/centerReducer'\nimport { setZoom } from '../reducers/zoomReducer'\nimport { setMyTram } from '../reducers/myTramReducer'\nimport { Container, Row, Col, Form, Button, Dropdown } from 'react-bootstrap'\nimport distance, {\n  sortByVehicleNumbers,\n  sortLineNumbers,\n  sortStopNames,\n} from '../utils/helpers'\nimport { get } from 'https';\n\nconst Sidebar = ({\n  closeSidebar,\n  showSidebar,\n  trams,\n  //showTrams,\n  setShowTrams,\n  setCenter,\n  setZoom,\n  stops,\n  myStop,\n  setMyStop,\n  myTram,\n  setMyTram,\n}) => {\n  const [line, setLine] = useState(0)\n  const [alarm, setAlarm] = useState(false)\n\n  const style = showSidebar ? { width: '250px' } : { width: '0' }\n\n  \n\n  const handleChooseMyTram = veh => {\n    console.log('TRAM CHOSEN: ', veh)\n    if (veh !== 'reset') {\n      let chosenTram = trams.find(tram => tram.VP.veh == veh)\n      console.log('chosen Tram:', chosenTram)\n      setMyTram(chosenTram)\n      setShowTrams([])\n      setCenter({ lat: chosenTram.VP.lat, lng: chosenTram.VP.long })\n      //setZoom(16)\n    } else {\n      setMyTram('')\n      setLine(0)\n    }\n  }\n\n  const handleShowLine = line => {\n    console.log('LINE CHOSEN: ', line)\n    setShowTrams(trams.filter(tram => parseInt(tram.VP.desi) == line))\n    setZoom(13)\n  }\n\n  const handleChooseStop = stopsGtfsId => {\n    console.log('STOP CHOSEN: ', stopsGtfsId)\n    setMyStop(stops.find(stop => stop.gtfsId === stopsGtfsId))\n  }\n /* const getTrams = () => {\n   return [...trams]\n } */\n\n  /* const handleSetAlarm = () => {\n    console.log('ALARM SET')\n    setInterval(()=> {\n        let upDatedTrams = getTrams()\n        console.log('DISTANCE NOW: ', distance(\n          myStop.lat,\n          myStop.lon,\n          upDatedTrams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat,\n          upDatedTrams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long\n        ), new Date())\n    }, 1000)\n  } */\n\n  let tramsInOrder = [...trams]\n  tramsInOrder.sort(sortByVehicleNumbers)\n\n  const lineNumbers = []\n  trams.forEach(tram => {\n    if (!lineNumbers.includes(parseInt(tram.VP.desi))) {\n      lineNumbers.push(parseInt(tram.VP.desi))\n    }\n  })\n  lineNumbers.sort(sortLineNumbers)\n\n  const stopsInOrder = [...stops]\n  stopsInOrder.sort(sortStopNames)\n\n  return (\n    <div style={style} className='sidebar' id='mySidebar'>\n      <Container>\n        <Row>\n          <Col xs={12}>\n            <Dropdown>\n              <Dropdown.Toggle variant='success' id='dropdown-basic'>\n                {!myStop ? 'CHOOSE STOP' : myStop.name + ' ' + myStop.gtfsId}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {stopsInOrder.map((stop, i) => (\n                  <Dropdown.Item\n                    key={i}\n                    onClick={() => handleChooseStop(stop.gtfsId)}\n                  >\n                    {stop.name} {stop.gtfsId}\n                  </Dropdown.Item>\n                ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={6}>\n            <Dropdown /* id='tramDropdown' */>\n              <Dropdown.Toggle variant='success' id='dropdown-basic'>\n                {line > 0 ? 'Line: ' + line : 'Line?'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {lineNumbers.map((line, i) => (\n                  <Dropdown.Item key={i} onClick={() => setLine(line)}>\n                    {line}\n                  </Dropdown.Item>\n                ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n          <Col xs={6}>\n            <Dropdown /* id='tramDropdown' */>\n              <Dropdown.Toggle variant='success' id='dropdown-basic'>\n                {myTram.VP ? 'Vehicle: ' + myTram.VP.veh : 'Vehicle?'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {myTram.VP ? \n                  <Dropdown.Item onClick={() => handleChooseMyTram('reset')}>\n                    reset\n                  </Dropdown.Item> \n                  : <Dropdown.Item>\n                  choose line\n                </Dropdown.Item>\n                }\n                {tramsInOrder\n                  .filter(tram => tram.VP.desi == line)\n                  .map((tram, i) => (\n                    <Dropdown.Item\n                      key={i}\n                      onClick={() => handleChooseMyTram(tram.VP.veh)}\n                    >\n                      {tram.VP.veh}\n                    </Dropdown.Item>\n                  ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n        </Row>\n\n        <Row>\n          {myTram.VP && myStop && (\n            <Col xs='auto'>\n              Distance:{' '}\n              {distance(\n                myStop.lat,\n                myStop.lon,\n                trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.lat,\n                trams.find(tram => tram.VP.veh === myTram.VP.veh).VP.long\n              )}{' '}\n             m\n            </Col>\n          )}\n        </Row>\n\n        <Row>\n          <Col>\n            <Button\n              onClick={() => {\n                setShowTrams(trams)\n                setZoom(13)\n                closeSidebar()\n              }}\n              variant='success'\n            >\n              show all trams\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button\n              onClick={() => setShowTrams([])}\n              variant='success'\n            >\n              hide all trams\n            </Button>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Dropdown /* id='tramDropdown' */>\n              <Dropdown.Toggle variant='success' id='dropdown-basic'>\n                Show Line\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {lineNumbers.map((line, i) => (\n                  <Dropdown.Item key={i} onClick={() => handleShowLine(line)}>\n                    {line}\n                  </Dropdown.Item>\n                ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          </Col>\n        </Row>\n        {myTram.VP && <Row>\n          <Button onClick={()=>setAlarm(!alarm)}>{!alarm ? 'Set alarm' : 'Alarm off'}</Button>\n        </Row>}\n      </Container>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    trams: state.trams,\n    //showTrams: state.showTrams,\n    showSidebar: state.showSidebar,\n    stops: state.stops,\n    myStop: state.myStop,\n    myTram: state.myTram,\n  }\n}\n\nconst mapDispatchToProps = {\n  setShowTrams,\n  setMyStop,\n  setCenter,\n  setZoom,\n  setMyTram,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Sidebar)\n\n{\n  /* \n        <Form>\n          <Row>\n            <Col xs='auto'>\n              <Form.Group controlId='exampleForm.ControlSelect3'>\n                <Form.Label>My stop</Form.Label>\n                <Form.Control\n                  as='select'\n                  onChange={handleChooseStop}\n                  value={myStop.gtfsId}\n                >\n                  <option> - </option>\n                  {stopsInOrder.map((stop, i) => (\n                    <option key={i} value={stop.gtfsId}>\n                      {stop.name} {stop.gtfsId}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Group controlId='exampleForm.ControlSelect1'>\n                <Form.Label>Choose tram</Form.Label>\n                <Form.Control as='select' onChange={handleChooseMyTram}>\n                  {!myTram.VP ? (\n                    <option> - </option>\n                  ) : (\n                    <option value='reset'>reset</option>\n                  )}\n                  {tramsInOrder.map((tram, i) => (\n                    <option key={i} value={tram.VP.veh}>\n                      line: {tram.VP.desi} veh:{tram.VP.veh}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Col>\n          </Row>\n \n           <Row>\n            <Col sm={5}>\n              <Form.Group>\n                <Form.Check\n                  type='radio'\n                  label='All times'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios1'\n                />\n                <Form.Check\n                  type='radio'\n                  label='today'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios2'\n                />\n                <Form.Check\n                  type='radio'\n                  label='this week'\n                  name='formHorizontalRadios'\n                  id='formHorizontalRadios3'\n                />\n              </Form.Group>\n            </Col>   \n          </Row> \n          <Row>\n          <Col>\n            <Form.Group controlId='exampleForm.ControlSelect2'>\n              <Form.Label>Show line</Form.Label>\n              <Form.Control as='select' onChange={handleShowLine}>\n                <option> - </option>\n                {lineNumbers.map((line, i) => (\n                  <option key={i} value={line}>\n                    {line}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Col>\n        </Row> \n        </Form> */\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/App.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n      {\\n        stopsByRadius(lat: 60.170627, lon: 24.939946, radius: 200) {\\n          edges {\\n            node {\\n              stop {\\n                id\\n                gtfsId\\n                 name\\n                lat\\n                lon \\n              }\\n            }\\n          }\\n        }\\n      }\\n      \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setTrams } from './reducers/tramsReducer';\nimport { setShowSidebar } from './reducers/showSidebarReducer';\nimport { setShowSidebarOpenButton } from './reducers/showSidebarOpenButtonReducer';\nimport { setStops } from './reducers/stopsReducer';\nimport { setMyStop } from './reducers/myStopReducer';\nimport './App.css';\nimport LeafletMap from './components/LeafletMap';\nimport Sidebar from './components/Sidebar';\nimport ApolloClient, { gql } from 'apollo-boost';\nconst client = new ApolloClient({\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'\n});\nconst query = gql(_templateObject());\n\nconst App = ({\n  setTrams,\n  setShowSidebar,\n  setShowSidebarOpenButton,\n  stops,\n  setStops,\n  myStop,\n  setMyStop\n}) => {\n  const _useState = useState({\n    lat: 60.170627,\n    lng: 24.939946\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        center = _useState2[0],\n        setCenter = _useState2[1];\n\n  const _useState3 = useState(16),\n        _useState4 = _slicedToArray(_useState3, 2),\n        zoom = _useState4[0],\n        setZoom = _useState4[1]; //const [stops, setStops] = useState([])\n  //const [myStop, setMyStop] = useState({})\n\n\n  useEffect(() => {\n    console.log('rendering App!!!!!');\n    client.query({\n      query\n    }).then(response => {\n      let edges = response.data.stopsByRadius.edges;\n      setStops(edges);\n      setMyStop(edges[0]);\n      console.log('EDGES: ', edges);\n      console.log('EDGES[0]: ', edges[0].node.stop.gtfsId);\n      edges.forEach(edge => {\n        console.log('HSL: ', edge.node.stop);\n      });\n    });\n  }, []);\n\n  const update = () => {\n    //fetch('http://localhost:3001/trams')\n    //console.log('STOPS: ', stops)\n    //console.log('MY STOP:', myStop)\n    if (myStop === {}) {\n      console.log('PÖÖ: ');\n    }\n    /*  if(myStop != {}){\n         setCenter({lat:myStop.node.stop.lat, lng:myStop.node.stop.lon}) \n      console.log()\n     } */\n\n\n    fetch('/trams').then(response => response.json()).then(body => {\n      setTrams(body);\n    }).catch(error => {\n      console.log(error);\n    });\n  }; //useEffect(() => update(), [new Date()])\n\n\n  setInterval(() => {\n    update();\n  }, 1000);\n\n  const openSidebar = () => {\n    setShowSidebar(true);\n    setShowSidebarOpenButton(false);\n    console.log('open!');\n  };\n\n  const closeSidebar = () => {\n    setShowSidebar(false);\n    setTimeout(() => {\n      setShowSidebarOpenButton(true);\n    }, 300);\n    console.log('close!');\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Sidebar, {\n    closeSidebar: closeSidebar,\n    setCenter: setCenter,\n    setZoom: setZoom //stops={stops}\n    //myStop={myStop}\n    //setMyStop={setMyStop}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(LeafletMap, {\n    openSidebar: openSidebar,\n    closeSidebar: closeSidebar,\n    center: center,\n    zoom: zoom //stops={stops}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    stops: state.stops,\n    myStop: state.myStop\n  };\n};\n\nconst mapDispatchToProps = {\n  setTrams,\n  setShowSidebar,\n  setShowSidebarOpenButton,\n  setStops,\n  setMyStop\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App); ////////// GEOLOCATION\n\n/*   if (\"geolocation\" in navigator) {\n    console.log(\"geolocation is available\");\n  } else {\n    console.log(\"geolocation is NOT available\");\n  }\n  navigator.geolocation.getCurrentPosition(position => { \n\n    const query = gql`\n      {\n        stopsByRadius(lat: ${position.coords.latitude}, lon: ${position.coords.longitude}, radius: 1000) {\n          edges {\n            node {\n              stop {\n                id\n                gtfsId\n                 name\n                lat\n                lon \n              }\n            }\n          }\n        }\n      }\n      ` \n    client.query({ query })\n      .then((response) => {\n        let edges = response.data.stopsByRadius.edges\n        setStops(edges)\n        edges.forEach(edge => {\n          console.log('HSL: ', edge.node.stop)\n        })\n      })\n    console.log(\"STARTING LOCATION \\nlatitude: \" + position.coords.latitude + \" longitude: \" + position.coords.longitude);\n  }); */","map":{"version":3,"sources":["/Users/jarihiekkapelto/Desktop/MOOC/harjoitusTyoFullStack19/mytram/ui/src/App.js"],"names":["React","useState","useEffect","connect","setTrams","setShowSidebar","setShowSidebarOpenButton","setStops","setMyStop","LeafletMap","Sidebar","ApolloClient","gql","client","uri","query","App","stops","myStop","lat","lng","center","setCenter","zoom","setZoom","console","log","then","response","edges","data","stopsByRadius","node","stop","gtfsId","forEach","edge","update","fetch","json","body","catch","error","setInterval","openSidebar","closeSidebar","setTimeout","mapStateToProps","state","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,wBAAT,QAAyC,yCAAzC;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,YAAP,IAAuBC,GAAvB,QAAkC,cAAlC;AAEA,MAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;AAIA,MAAMC,KAAK,GAAGH,GAAH,mBAAX;;AAoBA,MAAMI,GAAG,GAAG,CAAC;AACXZ,EAAAA,QADW;AAEXC,EAAAA,cAFW;AAGXC,EAAAA,wBAHW;AAIXW,EAAAA,KAJW;AAKXV,EAAAA,QALW;AAMXW,EAAAA,MANW;AAOXV,EAAAA;AAPW,CAAD,KAQN;AAAA,oBAGwBP,QAAQ,CAAC;AAAEkB,IAAAA,GAAG,EAAE,SAAP;AAAkBC,IAAAA,GAAG,EAAE;AAAvB,GAAD,CAHhC;AAAA;AAAA,QAGGC,MAHH;AAAA,QAGWC,SAHX;;AAAA,qBAIoBrB,QAAQ,CAAC,EAAD,CAJ5B;AAAA;AAAA,QAIGsB,IAJH;AAAA,QAISC,OAJT,kBAKJ;AACA;;;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAb,IAAAA,MAAM,CAACE,KAAP,CAAa;AAAEA,MAAAA;AAAF,KAAb,EACGY,IADH,CACSC,QAAD,IAAc;AAClB,UAAIC,KAAK,GAAGD,QAAQ,CAACE,IAAT,CAAcC,aAAd,CAA4BF,KAAxC;AACAtB,MAAAA,QAAQ,CAACsB,KAAD,CAAR;AACArB,MAAAA,SAAS,CAACqB,KAAK,CAAC,CAAD,CAAN,CAAT;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBG,KAAvB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BG,KAAK,CAAC,CAAD,CAAL,CAASG,IAAT,CAAcC,IAAd,CAAmBC,MAA7C;AACAL,MAAAA,KAAK,CAACM,OAAN,CAAcC,IAAI,IAAI;AACpBX,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBU,IAAI,CAACJ,IAAL,CAAUC,IAA/B;AACD,OAFD;AAGD,KAVH;AAWD,GAbQ,EAaN,EAbM,CAAT;;AAmBA,QAAMI,MAAM,GAAG,MAAM;AACnB;AACA;AACA;AACA,QAAInB,MAAM,KAAK,EAAf,EAAmB;AACjBO,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA;AACH;;;;;;AAICY,IAAAA,KAAK,CAAC,QAAD,CAAL,CACGX,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACW,IAAT,EADpB,EAEGZ,IAFH,CAEQa,IAAI,IAAI;AACZpC,MAAAA,QAAQ,CAACoC,IAAD,CAAR;AACD,KAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdjB,MAAAA,OAAO,CAACC,GAAR,CAAYgB,KAAZ;AACD,KAPH;AAQD,GAnBD,CA3BI,CAgDJ;;;AACAC,EAAAA,WAAW,CAAC,MAAM;AAChBN,IAAAA,MAAM;AACP,GAFU,EAER,IAFQ,CAAX;;AAIA,QAAMO,WAAW,GAAG,MAAM;AACxBvC,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAC,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,GAJD;;AAMA,QAAMmB,YAAY,GAAG,MAAM;AACzBxC,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAyC,IAAAA,UAAU,CAAC,MAAM;AACfxC,MAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD,KAFS,EAEP,GAFO,CAAV;AAGAmB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,GAND;;AAQA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AACE,IAAA,YAAY,EAAEmB,YADhB;AAEE,IAAA,SAAS,EAAEvB,SAFb;AAGE,IAAA,OAAO,EAAEE,OAHX,CAIA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,oBAAC,UAAD;AACE,IAAA,WAAW,EAAEoB,WADf;AAEE,IAAA,YAAY,EAAEC,YAFhB;AAGE,IAAA,MAAM,EAAExB,MAHV;AAIE,IAAA,IAAI,EAAEE,IAJR,CAKA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAmBD,CA9FD;;AAgGA,MAAMwB,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACL/B,IAAAA,KAAK,EAAE+B,KAAK,CAAC/B,KADR;AAELC,IAAAA,MAAM,EAAE8B,KAAK,CAAC9B;AAFT,GAAP;AAID,CALD;;AAOA,MAAM+B,kBAAkB,GAAG;AACzB7C,EAAAA,QADyB;AACfC,EAAAA,cADe;AACCC,EAAAA,wBADD;AAC2BC,EAAAA,QAD3B;AACqCC,EAAAA;AADrC,CAA3B;AAIA,eAAeL,OAAO,CACpB4C,eADoB,EAEpBE,kBAFoB,CAAP,CAGbjC,GAHa,CAAf,C,CAMA;;AAEE","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { setTrams } from './reducers/tramsReducer'\nimport { setShowSidebar } from './reducers/showSidebarReducer'\nimport { setShowSidebarOpenButton } from './reducers/showSidebarOpenButtonReducer'\nimport { setStops } from './reducers/stopsReducer'\nimport { setMyStop } from './reducers/myStopReducer'\nimport './App.css'\nimport LeafletMap from './components/LeafletMap'\nimport Sidebar from './components/Sidebar'\nimport ApolloClient, { gql } from 'apollo-boost'\n\nconst client = new ApolloClient({\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'\n})\n\nconst query = gql`\n      {\n        stopsByRadius(lat: 60.170627, lon: 24.939946, radius: 200) {\n          edges {\n            node {\n              stop {\n                id\n                gtfsId\n                 name\n                lat\n                lon \n              }\n            }\n          }\n        }\n      }\n      `\n\n\n\nconst App = ({\n  setTrams,\n  setShowSidebar,\n  setShowSidebarOpenButton,\n  stops,\n  setStops,\n  myStop,\n  setMyStop\n}) => {\n\n  \n  const [center, setCenter] = useState({ lat: 60.170627, lng: 24.939946 })\n  const [zoom, setZoom] = useState(16)\n  //const [stops, setStops] = useState([])\n  //const [myStop, setMyStop] = useState({})\n\n  useEffect(() => {\n    console.log('rendering App!!!!!')\n    client.query({ query })\n      .then((response) => {\n        let edges = response.data.stopsByRadius.edges\n        setStops(edges)\n        setMyStop(edges[0])\n        console.log('EDGES: ', edges)\n        console.log('EDGES[0]: ', edges[0].node.stop.gtfsId)\n        edges.forEach(edge => {\n          console.log('HSL: ', edge.node.stop)\n        })\n      })\n  }, [])\n\n\n\n\n\n  const update = () => {\n    //fetch('http://localhost:3001/trams')\n    //console.log('STOPS: ', stops)\n    //console.log('MY STOP:', myStop)\n    if (myStop === {}) {\n      console.log('PÖÖ: ')\n     }\n   /*  if(myStop != {}){\n        setCenter({lat:myStop.node.stop.lat, lng:myStop.node.stop.lon}) \n     console.log()\n    } */\n    fetch('/trams')\n      .then(response => response.json())\n      .then(body => {\n        setTrams(body)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  //useEffect(() => update(), [new Date()])\n  setInterval(() => {\n    update()\n  }, 1000)\n\n  const openSidebar = () => {\n    setShowSidebar(true)\n    setShowSidebarOpenButton(false)\n    console.log('open!')\n  }\n\n  const closeSidebar = () => {\n    setShowSidebar(false)\n    setTimeout(() => {\n      setShowSidebarOpenButton(true)\n    }, 300)\n    console.log('close!')\n  }\n\n  return (\n    <div className='App'>\n      <Sidebar\n        closeSidebar={closeSidebar}\n        setCenter={setCenter}\n        setZoom={setZoom}\n      //stops={stops}\n      //myStop={myStop}\n      //setMyStop={setMyStop}\n      />\n      <LeafletMap\n        openSidebar={openSidebar}\n        closeSidebar={closeSidebar}\n        center={center}\n        zoom={zoom}\n      //stops={stops}\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    stops: state.stops,\n    myStop: state.myStop,\n  }\n}\n\nconst mapDispatchToProps = {\n  setTrams, setShowSidebar, setShowSidebarOpenButton, setStops, setMyStop\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n\n\n////////// GEOLOCATION\n\n  /*   if (\"geolocation\" in navigator) {\n      console.log(\"geolocation is available\");\n    } else {\n      console.log(\"geolocation is NOT available\");\n    }\n    navigator.geolocation.getCurrentPosition(position => { \n  \n      const query = gql`\n        {\n          stopsByRadius(lat: ${position.coords.latitude}, lon: ${position.coords.longitude}, radius: 1000) {\n            edges {\n              node {\n                stop {\n                  id\n                  gtfsId\n                   name\n                  lat\n                  lon \n                }\n              }\n            }\n          }\n        }\n        ` \n      client.query({ query })\n        .then((response) => {\n          let edges = response.data.stopsByRadius.edges\n          setStops(edges)\n          edges.forEach(edge => {\n            console.log('HSL: ', edge.node.stop)\n          })\n        })\n      console.log(\"STARTING LOCATION \\nlatitude: \" + position.coords.latitude + \" longitude: \" + position.coords.longitude);\n    }); */\n\n\n"]},"metadata":{},"sourceType":"module"}
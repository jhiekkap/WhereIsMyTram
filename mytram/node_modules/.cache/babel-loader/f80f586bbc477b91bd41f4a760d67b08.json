{"ast":null,"code":"'use strict';\n/**\n * Module dependencies\n */\n\nvar xtend = require('xtend');\n\nvar Readable = require('readable-stream').Readable;\n\nvar streamsOpts = {\n  objectMode: true\n};\nvar defaultStoreOptions = {\n  clean: true\n  /**\n   * es6-map can preserve insertion order even if ES version is older.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Description\n   * It should be noted that a Map which is a map of an object, especially\n   * a dictionary of dictionaries, will only map to the object's insertion\n   * order. In ES2015 this is ordered for objects but for older versions of\n   * ES, this may be random and not ordered.\n   *\n   */\n\n};\n\nvar Map = require('es6-map');\n/**\n * In-memory implementation of the message store\n * This can actually be saved into files.\n *\n * @param {Object} [options] - store options\n */\n\n\nfunction Store(options) {\n  if (!(this instanceof Store)) {\n    return new Store(options);\n  }\n\n  this.options = options || {}; // Defaults\n\n  this.options = xtend(defaultStoreOptions, options);\n  this._inflights = new Map();\n}\n/**\n * Adds a packet to the store, a packet is\n * anything that has a messageId property.\n *\n */\n\n\nStore.prototype.put = function (packet, cb) {\n  this._inflights.set(packet.messageId, packet);\n\n  if (cb) {\n    cb();\n  }\n\n  return this;\n};\n/**\n * Creates a stream with all the packets in the store\n *\n */\n\n\nStore.prototype.createStream = function () {\n  var stream = new Readable(streamsOpts);\n  var destroyed = false;\n  var values = [];\n  var i = 0;\n\n  this._inflights.forEach(function (value, key) {\n    values.push(value);\n  });\n\n  stream._read = function () {\n    if (!destroyed && i < values.length) {\n      this.push(values[i++]);\n    } else {\n      this.push(null);\n    }\n  };\n\n  stream.destroy = function () {\n    if (destroyed) {\n      return;\n    }\n\n    var self = this;\n    destroyed = true;\n    process.nextTick(function () {\n      self.emit('close');\n    });\n  };\n\n  return stream;\n};\n/**\n * deletes a packet from the store.\n */\n\n\nStore.prototype.del = function (packet, cb) {\n  packet = this._inflights.get(packet.messageId);\n\n  if (packet) {\n    this._inflights.delete(packet.messageId);\n\n    cb(null, packet);\n  } else if (cb) {\n    cb(new Error('missing packet'));\n  }\n\n  return this;\n};\n/**\n * get a packet from the store.\n */\n\n\nStore.prototype.get = function (packet, cb) {\n  packet = this._inflights.get(packet.messageId);\n\n  if (packet) {\n    cb(null, packet);\n  } else if (cb) {\n    cb(new Error('missing packet'));\n  }\n\n  return this;\n};\n/**\n * Close the store\n */\n\n\nStore.prototype.close = function (cb) {\n  if (this.options.clean) {\n    this._inflights = null;\n  }\n\n  if (cb) {\n    cb();\n  }\n};\n\nmodule.exports = Store;","map":null,"metadata":{},"sourceType":"script"}
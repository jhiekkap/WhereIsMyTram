{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar writeToStream = require('./writeToStream');\n\nvar EE = require('events').EventEmitter;\n\nvar inherits = require('inherits');\n\nfunction generate(packet) {\n  var stream = new Accumulator();\n  writeToStream(packet, stream);\n  return stream.concat();\n}\n\nfunction Accumulator() {\n  this._array = new Array(20);\n  this._i = 0;\n}\n\ninherits(Accumulator, EE);\n\nAccumulator.prototype.write = function (chunk) {\n  this._array[this._i++] = chunk;\n  return true;\n};\n\nAccumulator.prototype.concat = function () {\n  var length = 0;\n  var lengths = new Array(this._array.length);\n  var list = this._array;\n  var pos = 0;\n  var i;\n  var result;\n\n  for (i = 0; i < list.length && list[i] !== undefined; i++) {\n    if (typeof list[i] !== 'string') lengths[i] = list[i].length;else lengths[i] = Buffer.byteLength(list[i]);\n    length += lengths[i];\n  }\n\n  result = Buffer.allocUnsafe(length);\n\n  for (i = 0; i < list.length && list[i] !== undefined; i++) {\n    if (typeof list[i] !== 'string') {\n      list[i].copy(result, pos);\n      pos += lengths[i];\n    } else {\n      result.write(list[i], pos);\n      pos += lengths[i];\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = generate;","map":null,"metadata":{},"sourceType":"script"}
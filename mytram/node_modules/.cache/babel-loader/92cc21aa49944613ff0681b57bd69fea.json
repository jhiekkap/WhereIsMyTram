{"ast":null,"code":"'use strict';\n\nvar bl = require('bl');\n\nvar inherits = require('inherits');\n\nvar EE = require('events').EventEmitter;\n\nvar Packet = require('./packet');\n\nvar constants = require('./constants');\n\nfunction Parser() {\n  if (!(this instanceof Parser)) return new Parser();\n  this._states = ['_parseHeader', '_parseLength', '_parsePayload', '_newPacket'];\n\n  this._resetState();\n}\n\ninherits(Parser, EE);\n\nParser.prototype._resetState = function () {\n  this.packet = new Packet();\n  this.error = null;\n  this._list = bl();\n  this._stateCounter = 0;\n};\n\nParser.prototype.parse = function (buf) {\n  if (this.error) this._resetState();\n\n  this._list.append(buf);\n\n  while ((this.packet.length !== -1 || this._list.length > 0) && this[this._states[this._stateCounter]]() && !this.error) {\n    this._stateCounter++;\n    if (this._stateCounter >= this._states.length) this._stateCounter = 0;\n  }\n\n  return this._list.length;\n};\n\nParser.prototype._parseHeader = function () {\n  // There is at least one byte in the buffer\n  var zero = this._list.readUInt8(0);\n\n  this.packet.cmd = constants.types[zero >> constants.CMD_SHIFT];\n  this.packet.retain = (zero & constants.RETAIN_MASK) !== 0;\n  this.packet.qos = zero >> constants.QOS_SHIFT & constants.QOS_MASK;\n  this.packet.dup = (zero & constants.DUP_MASK) !== 0;\n\n  this._list.consume(1);\n\n  return true;\n};\n\nParser.prototype._parseLength = function () {\n  // There is at least one byte in the list\n  var bytes = 0;\n  var mul = 1;\n  var length = 0;\n  var result = true;\n  var current;\n\n  while (bytes < 5) {\n    current = this._list.readUInt8(bytes++);\n    length += mul * (current & constants.LENGTH_MASK);\n    mul *= 0x80;\n    if ((current & constants.LENGTH_FIN_MASK) === 0) break;\n\n    if (this._list.length <= bytes) {\n      result = false;\n      break;\n    }\n  }\n\n  if (result) {\n    this.packet.length = length;\n\n    this._list.consume(bytes);\n  }\n\n  return result;\n};\n\nParser.prototype._parsePayload = function () {\n  var result = false; // Do we have a payload? Do we have enough data to complete the payload?\n  // PINGs have no payload\n\n  if (this.packet.length === 0 || this._list.length >= this.packet.length) {\n    this._pos = 0;\n\n    switch (this.packet.cmd) {\n      case 'connect':\n        this._parseConnect();\n\n        break;\n\n      case 'connack':\n        this._parseConnack();\n\n        break;\n\n      case 'publish':\n        this._parsePublish();\n\n        break;\n\n      case 'puback':\n      case 'pubrec':\n      case 'pubrel':\n      case 'pubcomp':\n        this._parseMessageId();\n\n        break;\n\n      case 'subscribe':\n        this._parseSubscribe();\n\n        break;\n\n      case 'suback':\n        this._parseSuback();\n\n        break;\n\n      case 'unsubscribe':\n        this._parseUnsubscribe();\n\n        break;\n\n      case 'unsuback':\n        this._parseUnsuback();\n\n        break;\n\n      case 'pingreq':\n      case 'pingresp':\n      case 'disconnect':\n        // These are empty, nothing to do\n        break;\n\n      default:\n        this._emitError(new Error('Not supported'));\n\n    }\n\n    result = true;\n  }\n\n  return result;\n};\n\nParser.prototype._parseConnect = function () {\n  var protocolId; // Protocol ID\n\n  var clientId; // Client ID\n\n  var topic; // Will topic\n\n  var payload; // Will payload\n\n  var password; // Password\n\n  var username; // Username\n\n  var flags = {};\n  var packet = this.packet; // Parse protocolId\n\n  protocolId = this._parseString();\n  if (protocolId === null) return this._emitError(new Error('Cannot parse protocolId'));\n\n  if (protocolId !== 'MQTT' && protocolId !== 'MQIsdp') {\n    return this._emitError(new Error('Invalid protocolId'));\n  }\n\n  packet.protocolId = protocolId; // Parse constants version number\n\n  if (this._pos >= this._list.length) return this._emitError(new Error('Packet too short'));\n  packet.protocolVersion = this._list.readUInt8(this._pos);\n\n  if (packet.protocolVersion !== 3 && packet.protocolVersion !== 4) {\n    return this._emitError(new Error('Invalid protocol version'));\n  }\n\n  this._pos++;\n\n  if (this._pos >= this._list.length) {\n    return this._emitError(new Error('Packet too short'));\n  } // Parse connect flags\n\n\n  flags.username = this._list.readUInt8(this._pos) & constants.USERNAME_MASK;\n  flags.password = this._list.readUInt8(this._pos) & constants.PASSWORD_MASK;\n  flags.will = this._list.readUInt8(this._pos) & constants.WILL_FLAG_MASK;\n\n  if (flags.will) {\n    packet.will = {};\n    packet.will.retain = (this._list.readUInt8(this._pos) & constants.WILL_RETAIN_MASK) !== 0;\n    packet.will.qos = (this._list.readUInt8(this._pos) & constants.WILL_QOS_MASK) >> constants.WILL_QOS_SHIFT;\n  }\n\n  packet.clean = (this._list.readUInt8(this._pos) & constants.CLEAN_SESSION_MASK) !== 0;\n  this._pos++; // Parse keepalive\n\n  packet.keepalive = this._parseNum();\n  if (packet.keepalive === -1) return this._emitError(new Error('Packet too short')); // Parse clientId\n\n  clientId = this._parseString();\n  if (clientId === null) return this._emitError(new Error('Packet too short'));\n  packet.clientId = clientId;\n\n  if (flags.will) {\n    // Parse will topic\n    topic = this._parseString();\n    if (topic === null) return this._emitError(new Error('Cannot parse will topic'));\n    packet.will.topic = topic; // Parse will payload\n\n    payload = this._parseBuffer();\n    if (payload === null) return this._emitError(new Error('Cannot parse will payload'));\n    packet.will.payload = payload;\n  } // Parse username\n\n\n  if (flags.username) {\n    username = this._parseString();\n    if (username === null) return this._emitError(new Error('Cannot parse username'));\n    packet.username = username;\n  } // Parse password\n\n\n  if (flags.password) {\n    password = this._parseBuffer();\n    if (password === null) return this._emitError(new Error('Cannot parse password'));\n    packet.password = password;\n  }\n\n  return packet;\n};\n\nParser.prototype._parseConnack = function () {\n  var packet = this.packet;\n  if (this._list.length < 2) return null;\n  packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & constants.SESSIONPRESENT_MASK);\n  packet.returnCode = this._list.readUInt8(this._pos);\n  if (packet.returnCode === -1) return this._emitError(new Error('Cannot parse return code'));\n};\n\nParser.prototype._parsePublish = function () {\n  var packet = this.packet;\n  packet.topic = this._parseString();\n  if (packet.topic === null) return this._emitError(new Error('Cannot parse topic')); // Parse messageId\n\n  if (packet.qos > 0) if (!this._parseMessageId()) {\n    return;\n  }\n  packet.payload = this._list.slice(this._pos, packet.length);\n};\n\nParser.prototype._parseSubscribe = function () {\n  var packet = this.packet;\n  var topic;\n  var qos;\n\n  if (packet.qos !== 1) {\n    return this._emitError(new Error('Wrong subscribe header'));\n  }\n\n  packet.subscriptions = [];\n\n  if (!this._parseMessageId()) {\n    return;\n  }\n\n  while (this._pos < packet.length) {\n    // Parse topic\n    topic = this._parseString();\n    if (topic === null) return this._emitError(new Error('Cannot parse topic'));\n    if (this._pos >= packet.length) return this._emitError(new Error('Malformed Subscribe Payload'));\n    qos = this._list.readUInt8(this._pos++); // Push pair to subscriptions\n\n    packet.subscriptions.push({\n      topic: topic,\n      qos: qos\n    });\n  }\n};\n\nParser.prototype._parseSuback = function () {\n  this.packet.granted = [];\n\n  if (!this._parseMessageId()) {\n    return;\n  } // Parse granted QoSes\n\n\n  while (this._pos < this.packet.length) {\n    this.packet.granted.push(this._list.readUInt8(this._pos++));\n  }\n};\n\nParser.prototype._parseUnsubscribe = function () {\n  var packet = this.packet;\n  packet.unsubscriptions = []; // Parse messageId\n\n  if (!this._parseMessageId()) {\n    return;\n  }\n\n  while (this._pos < packet.length) {\n    var topic; // Parse topic\n\n    topic = this._parseString();\n    if (topic === null) return this._emitError(new Error('Cannot parse topic')); // Push topic to unsubscriptions\n\n    packet.unsubscriptions.push(topic);\n  }\n};\n\nParser.prototype._parseUnsuback = function () {\n  if (!this._parseMessageId()) return this._emitError(new Error('Cannot parse messageId'));\n};\n\nParser.prototype._parseMessageId = function () {\n  var packet = this.packet;\n  packet.messageId = this._parseNum();\n\n  if (packet.messageId === null) {\n    this._emitError(new Error('Cannot parse messageId'));\n\n    return false;\n  }\n\n  return true;\n};\n\nParser.prototype._parseString = function (maybeBuffer) {\n  var length = this._parseNum();\n\n  var result;\n  var end = length + this._pos;\n  if (length === -1 || end > this._list.length || end > this.packet.length) return null;\n  result = this._list.toString('utf8', this._pos, end);\n  this._pos += length;\n  return result;\n};\n\nParser.prototype._parseBuffer = function () {\n  var length = this._parseNum();\n\n  var result;\n  var end = length + this._pos;\n  if (length === -1 || end > this._list.length || end > this.packet.length) return null;\n  result = this._list.slice(this._pos, end);\n  this._pos += length;\n  return result;\n};\n\nParser.prototype._parseNum = function () {\n  if (this._list.length - this._pos < 2) return -1;\n\n  var result = this._list.readUInt16BE(this._pos);\n\n  this._pos += 2;\n  return result;\n};\n\nParser.prototype._newPacket = function () {\n  if (this.packet) {\n    this._list.consume(this.packet.length);\n\n    this.emit('packet', this.packet);\n  }\n\n  this.packet = new Packet();\n  return true;\n};\n\nParser.prototype._emitError = function (err) {\n  this.error = err;\n  this.emit('error', err);\n};\n\nmodule.exports = Parser;","map":null,"metadata":{},"sourceType":"script"}
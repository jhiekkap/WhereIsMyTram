{"ast":null,"code":"'use strict';\n\nvar protocol = require('./constants');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar empty = Buffer.allocUnsafe(0);\nvar zeroBuf = Buffer.from([0]);\n\nvar numbers = require('./numbers');\n\nvar nextTick = require('process-nextick-args').nextTick;\n\nvar numCache = numbers.cache;\nvar generateNumber = numbers.generateNumber;\nvar generateCache = numbers.generateCache;\nvar writeNumber = writeNumberCached;\nvar toGenerate = true;\n\nfunction generate(packet, stream) {\n  if (stream.cork) {\n    stream.cork();\n    nextTick(uncork, stream);\n  }\n\n  if (toGenerate) {\n    toGenerate = false;\n    generateCache();\n  }\n\n  switch (packet.cmd) {\n    case 'connect':\n      return connect(packet, stream);\n\n    case 'connack':\n      return connack(packet, stream);\n\n    case 'publish':\n      return publish(packet, stream);\n\n    case 'puback':\n    case 'pubrec':\n    case 'pubrel':\n    case 'pubcomp':\n    case 'unsuback':\n      return confirmation(packet, stream);\n\n    case 'subscribe':\n      return subscribe(packet, stream);\n\n    case 'suback':\n      return suback(packet, stream);\n\n    case 'unsubscribe':\n      return unsubscribe(packet, stream);\n\n    case 'pingreq':\n    case 'pingresp':\n    case 'disconnect':\n      return emptyPacket(packet, stream);\n\n    default:\n      stream.emit('error', new Error('Unknown command'));\n      return false;\n  }\n}\n/**\n * Controls numbers cache.\n * Set to \"false\" to allocate buffers on-the-flight instead of pre-generated cache\n */\n\n\nObject.defineProperty(generate, 'cacheNumbers', {\n  get: function () {\n    return writeNumber === writeNumberCached;\n  },\n  set: function (value) {\n    if (value) {\n      if (!numCache || Object.keys(numCache).length === 0) toGenerate = true;\n      writeNumber = writeNumberCached;\n    } else {\n      toGenerate = false;\n      writeNumber = writeNumberGenerated;\n    }\n  }\n});\n\nfunction uncork(stream) {\n  stream.uncork();\n}\n\nfunction connect(opts, stream) {\n  var settings = opts || {};\n  var protocolId = settings.protocolId || 'MQTT';\n  var protocolVersion = settings.protocolVersion || 4;\n  var will = settings.will;\n  var clean = settings.clean;\n  var keepalive = settings.keepalive || 0;\n  var clientId = settings.clientId || '';\n  var username = settings.username;\n  var password = settings.password;\n  if (clean === undefined) clean = true;\n  var length = 0; // Must be a string and non-falsy\n\n  if (!protocolId || typeof protocolId !== 'string' && !Buffer.isBuffer(protocolId)) {\n    stream.emit('error', new Error('Invalid protocolId'));\n    return false;\n  } else length += protocolId.length + 2; // Must be 3 or 4\n\n\n  if (protocolVersion !== 3 && protocolVersion !== 4) {\n    stream.emit('error', new Error('Invalid protocol version'));\n    return false;\n  } else length += 1; // ClientId might be omitted in 3.1.1, but only if cleanSession is set to 1\n\n\n  if ((typeof clientId === 'string' || Buffer.isBuffer(clientId)) && (clientId || protocolVersion === 4) && (clientId || clean)) {\n    length += clientId.length + 2;\n  } else {\n    if (protocolVersion < 4) {\n      stream.emit('error', new Error('clientId must be supplied before 3.1.1'));\n      return false;\n    }\n\n    if (clean * 1 === 0) {\n      stream.emit('error', new Error('clientId must be given if cleanSession set to 0'));\n      return false;\n    }\n  } // Must be a two byte number\n\n\n  if (typeof keepalive !== 'number' || keepalive < 0 || keepalive > 65535 || keepalive % 1 !== 0) {\n    stream.emit('error', new Error('Invalid keepalive'));\n    return false;\n  } else length += 2; // Connect flags\n\n\n  length += 1; // If will exists...\n\n  if (will) {\n    // It must be an object\n    if (typeof will !== 'object') {\n      stream.emit('error', new Error('Invalid will'));\n      return false;\n    } // It must have topic typeof string\n\n\n    if (!will.topic || typeof will.topic !== 'string') {\n      stream.emit('error', new Error('Invalid will topic'));\n      return false;\n    } else {\n      length += Buffer.byteLength(will.topic) + 2;\n    } // Payload\n\n\n    if (will.payload && will.payload) {\n      if (will.payload.length >= 0) {\n        if (typeof will.payload === 'string') {\n          length += Buffer.byteLength(will.payload) + 2;\n        } else {\n          length += will.payload.length + 2;\n        }\n      } else {\n        stream.emit('error', new Error('Invalid will payload'));\n        return false;\n      }\n    } else {\n      length += 2;\n    }\n  } // Username\n\n\n  var providedUsername = false;\n\n  if (username != null) {\n    if (isStringOrBuffer(username)) {\n      providedUsername = true;\n      length += Buffer.byteLength(username) + 2;\n    } else {\n      stream.emit('error', new Error('Invalid username'));\n      return false;\n    }\n  } // Password\n\n\n  if (password != null) {\n    if (!providedUsername) {\n      stream.emit('error', new Error('Username is required to use password'));\n      return false;\n    }\n\n    if (isStringOrBuffer(password)) {\n      length += byteLength(password) + 2;\n    } else {\n      stream.emit('error', new Error('Invalid password'));\n      return false;\n    }\n  } // Generate header\n\n\n  stream.write(protocol.CONNECT_HEADER); // Generate length\n\n  writeLength(stream, length); // Generate protocol ID\n\n  writeStringOrBuffer(stream, protocolId);\n  stream.write(protocolVersion === 4 ? protocol.VERSION4 : protocol.VERSION3); // Connect flags\n\n  var flags = 0;\n  flags |= username != null ? protocol.USERNAME_MASK : 0;\n  flags |= password != null ? protocol.PASSWORD_MASK : 0;\n  flags |= will && will.retain ? protocol.WILL_RETAIN_MASK : 0;\n  flags |= will && will.qos ? will.qos << protocol.WILL_QOS_SHIFT : 0;\n  flags |= will ? protocol.WILL_FLAG_MASK : 0;\n  flags |= clean ? protocol.CLEAN_SESSION_MASK : 0;\n  stream.write(Buffer.from([flags])); // Keepalive\n\n  writeNumber(stream, keepalive); // Client ID\n\n  writeStringOrBuffer(stream, clientId); // Will\n\n  if (will) {\n    writeString(stream, will.topic);\n    writeStringOrBuffer(stream, will.payload);\n  } // Username and password\n\n\n  if (username != null) {\n    writeStringOrBuffer(stream, username);\n  }\n\n  if (password != null) {\n    writeStringOrBuffer(stream, password);\n  } // This is a small packet that happens only once on a stream\n  // We assume the stream is always free to receive more data after this\n\n\n  return true;\n}\n\nfunction connack(opts, stream) {\n  var settings = opts || {};\n  var rc = settings.returnCode; // Check return code\n\n  if (typeof rc !== 'number') {\n    stream.emit('error', new Error('Invalid return code'));\n    return false;\n  }\n\n  stream.write(protocol.CONNACK_HEADER);\n  writeLength(stream, 2);\n  stream.write(opts.sessionPresent ? protocol.SESSIONPRESENT_HEADER : zeroBuf);\n  return stream.write(Buffer.from([rc]));\n}\n\nfunction publish(opts, stream) {\n  var settings = opts || {};\n  var qos = settings.qos || 0;\n  var retain = settings.retain ? protocol.RETAIN_MASK : 0;\n  var topic = settings.topic;\n  var payload = settings.payload || empty;\n  var id = settings.messageId;\n  var length = 0; // Topic must be a non-empty string or Buffer\n\n  if (typeof topic === 'string') length += Buffer.byteLength(topic) + 2;else if (Buffer.isBuffer(topic)) length += topic.length + 2;else {\n    stream.emit('error', new Error('Invalid topic'));\n    return false;\n  } // Get the payload length\n\n  if (!Buffer.isBuffer(payload)) length += Buffer.byteLength(payload);else length += payload.length; // Message ID must a number if qos > 0\n\n  if (qos && typeof id !== 'number') {\n    stream.emit('error', new Error('Invalid messageId'));\n    return false;\n  } else if (qos) length += 2; // Header\n\n\n  stream.write(protocol.PUBLISH_HEADER[qos][opts.dup ? 1 : 0][retain ? 1 : 0]); // Remaining length\n\n  writeLength(stream, length); // Topic\n\n  writeNumber(stream, byteLength(topic));\n  stream.write(topic); // Message ID\n\n  if (qos > 0) writeNumber(stream, id); // Payload\n\n  return stream.write(payload);\n}\n/* Puback, pubrec, pubrel and pubcomp */\n\n\nfunction confirmation(opts, stream) {\n  var settings = opts || {};\n  var type = settings.cmd || 'puback';\n  var id = settings.messageId;\n  var dup = settings.dup && type === 'pubrel' ? protocol.DUP_MASK : 0;\n  var qos = 0;\n  if (type === 'pubrel') qos = 1; // Check message ID\n\n  if (typeof id !== 'number') {\n    stream.emit('error', new Error('Invalid messageId'));\n    return false;\n  } // Header\n\n\n  stream.write(protocol.ACKS[type][qos][dup][0]); // Length\n\n  writeLength(stream, 2); // Message ID\n\n  return writeNumber(stream, id);\n}\n\nfunction subscribe(opts, stream) {\n  var settings = opts || {};\n  var dup = settings.dup ? protocol.DUP_MASK : 0;\n  var id = settings.messageId;\n  var subs = settings.subscriptions;\n  var length = 0; // Check message ID\n\n  if (typeof id !== 'number') {\n    stream.emit('error', new Error('Invalid messageId'));\n    return false;\n  } else length += 2; // Check subscriptions\n\n\n  if (typeof subs === 'object' && subs.length) {\n    for (var i = 0; i < subs.length; i += 1) {\n      var itopic = subs[i].topic;\n      var iqos = subs[i].qos;\n\n      if (typeof itopic !== 'string') {\n        stream.emit('error', new Error('Invalid subscriptions - invalid topic'));\n        return false;\n      }\n\n      if (typeof iqos !== 'number') {\n        stream.emit('error', new Error('Invalid subscriptions - invalid qos'));\n        return false;\n      }\n\n      length += Buffer.byteLength(itopic) + 2 + 1;\n    }\n  } else {\n    stream.emit('error', new Error('Invalid subscriptions'));\n    return false;\n  } // Generate header\n\n\n  stream.write(protocol.SUBSCRIBE_HEADER[1][dup ? 1 : 0][0]); // Generate length\n\n  writeLength(stream, length); // Generate message ID\n\n  writeNumber(stream, id);\n  var result = true; // Generate subs\n\n  for (var j = 0; j < subs.length; j++) {\n    var sub = subs[j];\n    var jtopic = sub.topic;\n    var jqos = sub.qos; // Write topic string\n\n    writeString(stream, jtopic); // Write qos\n\n    result = stream.write(protocol.QOS[jqos]);\n  }\n\n  return result;\n}\n\nfunction suback(opts, stream) {\n  var settings = opts || {};\n  var id = settings.messageId;\n  var granted = settings.granted;\n  var length = 0; // Check message ID\n\n  if (typeof id !== 'number') {\n    stream.emit('error', new Error('Invalid messageId'));\n    return false;\n  } else length += 2; // Check granted qos vector\n\n\n  if (typeof granted === 'object' && granted.length) {\n    for (var i = 0; i < granted.length; i += 1) {\n      if (typeof granted[i] !== 'number') {\n        stream.emit('error', new Error('Invalid qos vector'));\n        return false;\n      }\n\n      length += 1;\n    }\n  } else {\n    stream.emit('error', new Error('Invalid qos vector'));\n    return false;\n  } // header\n\n\n  stream.write(protocol.SUBACK_HEADER); // Length\n\n  writeLength(stream, length); // Message ID\n\n  writeNumber(stream, id);\n  return stream.write(Buffer.from(granted));\n}\n\nfunction unsubscribe(opts, stream) {\n  var settings = opts || {};\n  var id = settings.messageId;\n  var dup = settings.dup ? protocol.DUP_MASK : 0;\n  var unsubs = settings.unsubscriptions;\n  var length = 0; // Check message ID\n\n  if (typeof id !== 'number') {\n    stream.emit('error', new Error('Invalid messageId'));\n    return false;\n  } else {\n    length += 2;\n  } // Check unsubs\n\n\n  if (typeof unsubs === 'object' && unsubs.length) {\n    for (var i = 0; i < unsubs.length; i += 1) {\n      if (typeof unsubs[i] !== 'string') {\n        stream.emit('error', new Error('Invalid unsubscriptions'));\n        return false;\n      }\n\n      length += Buffer.byteLength(unsubs[i]) + 2;\n    }\n  } else {\n    stream.emit('error', new Error('Invalid unsubscriptions'));\n    return false;\n  } // Header\n\n\n  stream.write(protocol.UNSUBSCRIBE_HEADER[1][dup ? 1 : 0][0]); // Length\n\n  writeLength(stream, length); // Message ID\n\n  writeNumber(stream, id); // Unsubs\n\n  var result = true;\n\n  for (var j = 0; j < unsubs.length; j++) {\n    result = writeString(stream, unsubs[j]);\n  }\n\n  return result;\n}\n\nfunction emptyPacket(opts, stream) {\n  return stream.write(protocol.EMPTY[opts.cmd]);\n}\n/**\n * calcLengthLength - calculate the length of the remaining\n * length field\n *\n * @api private\n */\n\n\nfunction calcLengthLength(length) {\n  if (length >= 0 && length < 128) return 1;else if (length >= 128 && length < 16384) return 2;else if (length >= 16384 && length < 2097152) return 3;else if (length >= 2097152 && length < 268435456) return 4;else return 0;\n}\n\nfunction genBufLength(length) {\n  var digit = 0;\n  var pos = 0;\n  var buffer = Buffer.allocUnsafe(calcLengthLength(length));\n\n  do {\n    digit = length % 128 | 0;\n    length = length / 128 | 0;\n    if (length > 0) digit = digit | 0x80;\n    buffer.writeUInt8(digit, pos++);\n  } while (length > 0);\n\n  return buffer;\n}\n/**\n * writeLength - write an MQTT style length field to the buffer\n *\n * @param <Buffer> buffer - destination\n * @param <Number> pos - offset\n * @param <Number> length - length (>0)\n * @returns <Number> number of bytes written\n *\n * @api private\n */\n\n\nvar lengthCache = {};\n\nfunction writeLength(stream, length) {\n  var buffer = lengthCache[length];\n\n  if (!buffer) {\n    buffer = genBufLength(length);\n    if (length < 16384) lengthCache[length] = buffer;\n  }\n\n  stream.write(buffer);\n}\n/**\n * writeString - write a utf8 string to the buffer\n *\n * @param <Buffer> buffer - destination\n * @param <Number> pos - offset\n * @param <String> string - string to write\n * @return <Number> number of bytes written\n *\n * @api private\n */\n\n\nfunction writeString(stream, string) {\n  var strlen = Buffer.byteLength(string);\n  writeNumber(stream, strlen);\n  stream.write(string, 'utf8');\n}\n/**\n * writeNumber - write a two byte number to the buffer\n *\n * @param <Buffer> buffer - destination\n * @param <Number> pos - offset\n * @param <String> number - number to write\n * @return <Number> number of bytes written\n *\n * @api private\n */\n\n\nfunction writeNumberCached(stream, number) {\n  return stream.write(numCache[number]);\n}\n\nfunction writeNumberGenerated(stream, number) {\n  return stream.write(generateNumber(number));\n}\n/**\n * writeStringOrBuffer - write a String or Buffer with the its length prefix\n *\n * @param <Buffer> buffer - destination\n * @param <Number> pos - offset\n * @param <String> toWrite - String or Buffer\n * @return <Number> number of bytes written\n */\n\n\nfunction writeStringOrBuffer(stream, toWrite) {\n  if (typeof toWrite === 'string') {\n    writeString(stream, toWrite);\n  } else if (toWrite) {\n    writeNumber(stream, toWrite.length);\n    stream.write(toWrite);\n  } else writeNumber(stream, 0);\n}\n\nfunction byteLength(bufOrString) {\n  if (!bufOrString) return 0;else if (bufOrString instanceof Buffer) return bufOrString.length;else return Buffer.byteLength(bufOrString);\n}\n\nfunction isStringOrBuffer(field) {\n  return typeof field === 'string' || field instanceof Buffer;\n}\n\nmodule.exports = generate;","map":null,"metadata":{},"sourceType":"script"}
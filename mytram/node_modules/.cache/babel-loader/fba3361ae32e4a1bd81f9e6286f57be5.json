{"ast":null,"code":"// Internal method, used by iteration functions.\n// Calls a function for each key-value pair found in object\n// Optionally takes compareFn to iterate object in specific order\n\"use strict\";\n\nvar callable = require(\"./valid-callable\"),\n    value = require(\"./valid-value\"),\n    bind = Function.prototype.bind,\n    call = Function.prototype.call,\n    keys = Object.keys,\n    objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function (method, defVal) {\n  return function (obj, cb\n  /*, thisArg, compareFn*/\n  ) {\n    var list,\n        thisArg = arguments[2],\n        compareFn = arguments[3];\n    obj = Object(value(obj));\n    callable(cb);\n    list = keys(obj);\n\n    if (compareFn) {\n      list.sort(typeof compareFn === \"function\" ? bind.call(compareFn, obj) : undefined);\n    }\n\n    if (typeof method !== \"function\") method = list[method];\n    return call.call(method, list, function (key, index) {\n      if (!objPropertyIsEnumerable.call(obj, key)) return defVal;\n      return call.call(cb, thisArg, obj[key], key, obj, index);\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}
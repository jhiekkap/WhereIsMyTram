{"ast":null,"code":"\"use strict\";\n\nvar setPrototypeOf = require(\"es5-ext/object/set-prototype-of\"),\n    contains = require(\"es5-ext/string/#/contains\"),\n    d = require(\"d\"),\n    Symbol = require(\"es6-symbol\"),\n    Iterator = require(\"./\");\n\nvar defineProperty = Object.defineProperty,\n    ArrayIterator;\n\nArrayIterator = module.exports = function (arr, kind) {\n  if (!(this instanceof ArrayIterator)) throw new TypeError(\"Constructor requires 'new'\");\n  Iterator.call(this, arr);\n  if (!kind) kind = \"value\";else if (contains.call(kind, \"key+value\")) kind = \"key+value\";else if (contains.call(kind, \"key\")) kind = \"key\";else kind = \"value\";\n  defineProperty(this, \"__kind__\", d(\"\", kind));\n};\n\nif (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator); // Internal %ArrayIteratorPrototype% doesn't expose its constructor\n\ndelete ArrayIterator.prototype.constructor;\nArrayIterator.prototype = Object.create(Iterator.prototype, {\n  _resolve: d(function (i) {\n    if (this.__kind__ === \"value\") return this.__list__[i];\n    if (this.__kind__ === \"key+value\") return [i, this.__list__[i]];\n    return i;\n  })\n});\ndefineProperty(ArrayIterator.prototype, Symbol.toStringTag, d(\"c\", \"Array Iterator\"));","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar websocket = require('websocket-stream');\n\nvar urlModule = require('url');\n\nvar WSS_OPTIONS = ['rejectUnauthorized', 'ca', 'cert', 'key', 'pfx', 'passphrase'];\nvar IS_BROWSER = process.title === 'browser';\n\nfunction buildUrl(opts, client) {\n  var url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path;\n\n  if (typeof opts.transformWsUrl === 'function') {\n    url = opts.transformWsUrl(url, opts, client);\n  }\n\n  return url;\n}\n\nfunction setDefaultOpts(opts) {\n  if (!opts.hostname) {\n    opts.hostname = 'localhost';\n  }\n\n  if (!opts.port) {\n    if (opts.protocol === 'wss') {\n      opts.port = 443;\n    } else {\n      opts.port = 80;\n    }\n  }\n\n  if (!opts.path) {\n    opts.path = '/';\n  }\n\n  if (!opts.wsOptions) {\n    opts.wsOptions = {};\n  }\n\n  if (!IS_BROWSER && opts.protocol === 'wss') {\n    // Add cert/key/ca etc options\n    WSS_OPTIONS.forEach(function (prop) {\n      if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {\n        opts.wsOptions[prop] = opts[prop];\n      }\n    });\n  }\n}\n\nfunction createWebSocket(client, opts) {\n  var websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';\n  setDefaultOpts(opts);\n  var url = buildUrl(opts, client);\n  return websocket(url, [websocketSubProtocol], opts.wsOptions);\n}\n\nfunction buildBuilder(client, opts) {\n  return createWebSocket(client, opts);\n}\n\nfunction buildBuilderBrowser(client, opts) {\n  if (!opts.hostname) {\n    opts.hostname = opts.host;\n  }\n\n  if (!opts.hostname) {\n    // Throwing an error in a Web Worker if no `hostname` is given, because we\n    // can not determine the `hostname` automatically.  If connecting to\n    // localhost, please supply the `hostname` as an argument.\n    if (typeof document === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.');\n    }\n\n    var parsed = urlModule.parse(document.URL);\n    opts.hostname = parsed.hostname;\n\n    if (!opts.port) {\n      opts.port = parsed.port;\n    }\n  }\n\n  return createWebSocket(client, opts);\n}\n\nif (IS_BROWSER) {\n  module.exports = buildBuilderBrowser;\n} else {\n  module.exports = buildBuilder;\n}","map":null,"metadata":{},"sourceType":"script"}